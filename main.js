/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JinaLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var path = __toESM(require("path"));
var crypto = __toESM(require("crypto"));
var AI_JUDGED_CANDIDATES_FM_KEY = "ai_judged_candidates";
var DEFAULT_OUTPUT_DIR_IN_VAULT = ".Jina-AI-Linker-Output";
var HASH_BOUNDARY_MARKER = "<!-- HASH_BOUNDARY -->";
var DEFAULT_SETTINGS = {
  pythonPath: "python",
  jinaApiKey: "",
  deepseekApiKey: "",
  similarityThreshold: 0.7,
  excludedFolders: ".obsidian, Scripts, assets, Excalidraw, .trash, Python-Templater-Plugin-Output",
  excludedFilesPatterns: "*excalidraw*, template*.md, *.kanban.md, ^moc$, ^index$",
  jinaModelName: "jina-embeddings-v3",
  maxCharsForJina: 8e3,
  deepseekModelName: "deepseek-chat",
  maxContentLengthForAI: 5e3,
  maxCandidatesPerSourceForAIScoring: 20,
  minAiScoreForLinkInsertion: 6,
  maxLinksToInsertPerNote: 10
};
var SUGGESTED_LINKS_TITLE = "## \u5EFA\u8BAE\u94FE\u63A5";
var LINKS_START_MARKER = "<!-- LINKS_START -->";
var LINKS_END_MARKER = "<!-- LINKS_END -->";
var EMBEDDINGS_FILE_NAME = "jina_embeddings.json";
var RunPluginModal = class extends import_obsidian.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.options = {
      scanPath: "",
      scoringMode: "smart"
    };
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u914D\u7F6E Jina Linker \u8FD0\u884C\u53C2\u6570" });
    new import_obsidian.Setting(contentEl).setName("\u626B\u63CF\u76EE\u6807\u6587\u4EF6\u5939 (\u53EF\u9009)").setDesc('\u9017\u53F7\u5206\u9694\u7684\u4ED3\u5E93\u76F8\u5BF9\u6587\u4EF6\u5939\u8DEF\u5F84\u3002\u8BF7\u4F7F\u7528\u6B63\u659C\u6760 "/" \u4F5C\u4E3A\u8DEF\u5F84\u5206\u9694\u7B26\u3002\u8F93\u5165\u201C/\u201D\u5219\u626B\u63CF\u6574\u4E2A\u4ED3\u5E93 (\u4F1A\u9075\u5FAA\u5168\u5C40\u6392\u9664\u8BBE\u7F6E)\u3002\u4F8B\u5982\uFF1A\u7B14\u8BB0/\u6587\u4EF6\u5939, \u77E5\u8BC6\u5E93/\u6587\u7AE0').addText((text) => text.setPlaceholder("\u8F93\u5165\u201C/\u201D\u626B\u63CF\u6574\u4E2A\u4ED3\u5E93\uFF0C\u6216\u4F8B\u5982\uFF1A\u6587\u4EF6\u59391/\u5B50\u6587\u4EF6\u5939, \u6587\u4EF6\u59392").setValue(this.options.scanPath).onChange((value) => {
      this.options.scanPath = value.trim();
    }));
    new import_obsidian.Setting(contentEl).setName("AI \u667A\u80FD\u8BC4\u5206\u6A21\u5F0F").setDesc("\u51B3\u5B9A\u5982\u4F55\u5904\u7406\u5019\u9009\u94FE\u63A5\u5BF9\u7684 AI \u8BC4\u5206\u3002").addDropdown((dropdown) => dropdown.addOption("smart", "\u667A\u80FD (\u4EC5\u5BF9\u672A\u8BC4\u5206\u7684\u8FDB\u884C\u8BC4\u5206)").addOption("force", "\u5F3A\u5236\u91CD\u65B0\u8BC4\u5206 (\u5BF9\u6240\u6709\u8FDB\u884C\u8BC4\u5206)").addOption("skip", "\u8DF3\u8FC7 AI \u8BC4\u5206").setValue(this.options.scoringMode).onChange((value) => {
      this.options.scoringMode = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("\u5F00\u59CB\u5904\u7406").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.options);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CalculateHashModal = class extends import_obsidian.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.filePath = "";
    // 用于存储自动完成的文件和文件夹路径
    this.allPaths = [];
    this.plugin = plugin;
    this.onSubmit = onSubmit;
    this.loadAllPaths();
  }
  // 加载所有Markdown文件路径
  loadAllPaths() {
    this.allPaths = [];
    const allFiles = this.app.vault.getAllLoadedFiles();
    for (const file of allFiles) {
      if (file instanceof import_obsidian.TFile && file.extension === "md") {
        this.allPaths.push(file.path);
      }
    }
    this.allPaths.sort();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u8BA1\u7B97\u7B14\u8BB0\u5185\u5BB9\u54C8\u5E0C\u503C" });
    const settingDiv = contentEl.createDiv();
    settingDiv.addClass("jina-setting");
    const descEl = settingDiv.createDiv();
    descEl.addClass("setting-item-description");
    descEl.setText('\u8BF7\u8F93\u5165\u8981\u8BA1\u7B97\u54C8\u5E0C\u503C\u7684\u7B14\u8BB0\u7684\u4ED3\u5E93\u76F8\u5BF9\u8DEF\u5F84\u3002\u8BF7\u4F7F\u7528\u6B63\u659C\u6760 "/" \u4F5C\u4E3A\u8DEF\u5F84\u5206\u9694\u7B26 (\u4F8B\u5982\uFF1A\u6587\u4EF6\u5939/\u7B14\u8BB0.md)\u3002');
    const inputContainer = settingDiv.createDiv();
    inputContainer.addClass("jina-path-input-container");
    this.inputEl = document.createElement("input");
    this.inputEl.addClass("jina-path-input");
    this.inputEl.setAttr("placeholder", "\u4F8B\u5982\uFF1ANotes/MyNote.md");
    this.inputEl.value = this.filePath;
    inputContainer.appendChild(this.inputEl);
    const browseButton = document.createElement("button");
    browseButton.setText("\u6D4F\u89C8...");
    browseButton.addClass("jina-browse-button");
    inputContainer.appendChild(browseButton);
    this.inputEl.addEventListener("input", (e) => {
      this.filePath = this.inputEl.value;
    });
    browseButton.addEventListener("click", () => {
      const currentPath = this.inputEl.value.trim();
      this.openPathSuggestModal(currentPath, (selectedPath) => {
        if (selectedPath) {
          this.inputEl.value = selectedPath;
          this.filePath = selectedPath;
          this.inputEl.focus();
        }
      });
    });
    const buttonContainer = contentEl.createDiv();
    buttonContainer.addClass("jina-button-container");
    const submitButton = buttonContainer.createEl("button");
    submitButton.setText("\u8BA1\u7B97\u54C8\u5E0C");
    submitButton.addClass("mod-cta");
    submitButton.addEventListener("click", () => {
      if (!this.filePath) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u6587\u4EF6\u8DEF\u5F84\u3002");
        return;
      }
      this.close();
      this.onSubmit(this.filePath);
    });
    this.addStyles(contentEl);
  }
  // 打开路径建议弹窗
  openPathSuggestModal(currentPath, callback) {
    const modal = new PathSuggestModal(this.app, this.allPaths, currentPath, callback);
    modal.open();
  }
  // 添加样式
  addStyles(contentEl) {
    const styleEl = contentEl.createEl("style");
    styleEl.textContent = `
            .jina-setting {
                padding: 12px 0;
            }
            .jina-path-input-container {
                display: flex;
                margin-top: 8px;
                gap: 8px;
                align-items: center;
            }
            .jina-path-input {
                flex-grow: 1;
                padding: 8px;
                border-radius: 4px;
                font-size: 14px;
                background-color: var(--background-modifier-form-field);
                border: 1px solid var(--background-modifier-border);
            }
            .jina-browse-button {
                padding: 6px 12px;
                background-color: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
            .jina-button-container {
                display: flex;
                justify-content: flex-end;
                margin-top: 12px;
            }
        `;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var UpdateHashesModal = class extends import_obsidian.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.filePaths = "";
    // 用于存储自动完成的文件和文件夹路径
    this.allPaths = [];
    this.plugin = plugin;
    this.onSubmit = onSubmit;
    this.loadAllPaths();
  }
  // 加载所有文件和文件夹路径
  loadAllPaths() {
    this.allPaths = [];
    const allFiles = this.app.vault.getAllLoadedFiles();
    for (const file of allFiles) {
      if (file instanceof import_obsidian.TFile && file.extension === "md") {
        this.allPaths.push(file.path);
      } else if (file instanceof import_obsidian.TFolder) {
        this.allPaths.push(file.path + "/");
      }
    }
    this.allPaths.sort();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u66F4\u65B0\u5D4C\u5165\u6570\u636E\u4E2D\u7684\u7B14\u8BB0\u54C8\u5E0C\u503C" });
    const settingDiv = contentEl.createDiv();
    settingDiv.addClass("jina-setting");
    const descEl = settingDiv.createDiv();
    descEl.addClass("setting-item-description");
    descEl.setText('\u8BF7\u8F93\u5165\u4E00\u4E2A\u6216\u591A\u4E2A\u4ED3\u5E93\u76F8\u5BF9\u8DEF\u5F84 (\u7528\u82F1\u6587\u9017\u53F7 "," \u5206\u9694)\u3002\u8BF7\u4F7F\u7528\u6B63\u659C\u6760 "/" \u4F5C\u4E3A\u8DEF\u5F84\u5206\u9694\u7B26\u3002\u53EF\u4EE5\u662F\u5177\u4F53\u6587\u4EF6\u6216\u6587\u4EF6\u5939 (\u4F8B\u5982\uFF1A\u6587\u4EF6\u59391/\u7B14\u8BB0.md, \u6587\u4EF6\u59392/)\u3002');
    const inputContainer = settingDiv.createDiv();
    inputContainer.addClass("jina-path-input-container");
    this.inputEl = document.createElement("textarea");
    this.inputEl.addClass("jina-path-textarea");
    this.inputEl.setAttr("rows", "3");
    this.inputEl.setAttr("placeholder", "\u4F8B\u5982\uFF1ANotes/Note1.md, \u6587\u4EF6\u5939/");
    this.inputEl.value = this.filePaths;
    inputContainer.appendChild(this.inputEl);
    const browseButton = document.createElement("button");
    browseButton.setText("\u6D4F\u89C8...");
    browseButton.addClass("jina-browse-button");
    inputContainer.appendChild(browseButton);
    this.inputEl.addEventListener("input", (e) => {
      this.filePaths = this.inputEl.value;
    });
    browseButton.addEventListener("click", () => {
      const cursorPos = this.inputEl.selectionStart;
      const text = this.inputEl.value;
      let startPos = text.lastIndexOf(",", cursorPos - 1);
      if (startPos === -1)
        startPos = 0;
      else
        startPos += 1;
      const currentPath = text.substring(startPos, cursorPos).trim();
      this.openPathSuggestModal(currentPath, (selectedPath) => {
        if (selectedPath) {
          const newValue = text.substring(0, startPos) + (startPos > 0 ? " " : "") + selectedPath + text.substring(cursorPos);
          this.inputEl.value = newValue;
          this.filePaths = newValue;
          const newCursorPos = startPos + selectedPath.length + (startPos > 0 ? 1 : 0);
          this.inputEl.setSelectionRange(newCursorPos, newCursorPos);
          this.inputEl.focus();
        }
      });
    });
    const buttonContainer = contentEl.createDiv();
    buttonContainer.addClass("jina-button-container");
    const submitButton = buttonContainer.createEl("button");
    submitButton.setText("\u66F4\u65B0\u54C8\u5E0C\u503C");
    submitButton.addClass("mod-cta");
    submitButton.addEventListener("click", () => {
      if (!this.filePaths.trim()) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u81F3\u5C11\u4E00\u4E2A\u6587\u4EF6\u8DEF\u5F84\u3002");
        return;
      }
      this.close();
      this.onSubmit(this.filePaths);
    });
    this.addStyles(contentEl);
  }
  // 打开路径建议弹窗
  openPathSuggestModal(currentPath, callback) {
    const modal = new PathSuggestModal(this.app, this.allPaths, currentPath, callback);
    modal.open();
  }
  // 添加样式
  addStyles(contentEl) {
    const styleEl = contentEl.createEl("style");
    styleEl.textContent = `
            .jina-setting {
                padding: 12px 0;
            }
            .jina-path-input-container {
                display: flex;
                margin-top: 8px;
                gap: 8px;
                align-items: flex-start;
            }
            .jina-path-textarea {
                flex-grow: 1;
                min-height: 60px;
                padding: 8px;
                border-radius: 4px;
                font-size: 14px;
                background-color: var(--background-modifier-form-field);
                border: 1px solid var(--background-modifier-border);
            }
            .jina-browse-button {
                padding: 6px 12px;
                background-color: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
            .jina-button-container {
                display: flex;
                justify-content: flex-end;
                margin-top: 12px;
            }
        `;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PathSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, paths, inputText, callback) {
    super(app);
    this.paths = paths;
    this.inputText = inputText || "";
    this.callback = callback;
    this.setPlaceholder("\u9009\u62E9\u6587\u4EF6\u6216\u6587\u4EF6\u5939\u8DEF\u5F84");
    if (this.inputText) {
      this.inputEl.value = this.inputText;
      this.inputEl.dispatchEvent(new Event("input"));
    }
  }
  getItems() {
    return this.paths;
  }
  getItemText(path2) {
    return path2;
  }
  onChooseItem(path2, evt) {
    this.callback(path2);
  }
  renderSuggestion(item, el) {
    const match = item.item;
    el.setText(match);
    if (match.endsWith("/")) {
      el.addClass("jina-folder-path");
      const iconEl = el.createSpan({ cls: "jina-folder-icon" });
      iconEl.setText("\u{1F4C1} ");
      el.prepend(iconEl);
    } else {
      el.addClass("jina-file-path");
      const iconEl = el.createSpan({ cls: "jina-file-icon" });
      iconEl.setText("\u{1F4C4} ");
      el.prepend(iconEl);
    }
  }
};
var JinaLinkerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "run-jina-linker-processing-and-insert-links",
      name: "\u5904\u7406\u7B14\u8BB0\u5E76\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5",
      callback: () => {
        new RunPluginModal(this.app, this, async (options) => {
          const pythonSuccess = await this.runPythonScript(options.scanPath, options.scoringMode);
          if (pythonSuccess) {
            new import_obsidian.Notice("Python \u811A\u672C\u6267\u884C\u5B8C\u6BD5\u3002\u73B0\u5728\u5C1D\u8BD5\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5...", 5e3);
            await this.insertAISuggestedLinksIntoNotes(options.scanPath);
          } else {
            new import_obsidian.Notice("Python \u811A\u672C\u6267\u884C\u5931\u8D25\u3002\u94FE\u63A5\u63D2\u5165\u6B65\u9AA4\u5C06\u88AB\u8DF3\u8FC7\u3002", 0);
          }
        }).open();
      }
    });
    this.addRibbonIcon("link", "Jina Linker \u5DE5\u5177", (evt) => {
      const menu = new import_obsidian.Menu();
      menu.addItem((item) => {
        item.setTitle("\u5904\u7406\u7B14\u8BB0\u5E76\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5").setIcon("link").onClick(() => {
          new RunPluginModal(this.app, this, async (options) => {
            const pythonSuccess = await this.runPythonScript(options.scanPath, options.scoringMode);
            if (pythonSuccess) {
              new import_obsidian.Notice("Python \u811A\u672C\u6267\u884C\u5B8C\u6BD5\u3002\u73B0\u5728\u5C1D\u8BD5\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5...", 5e3);
              await this.insertAISuggestedLinksIntoNotes(options.scanPath);
            } else {
              new import_obsidian.Notice("Python \u811A\u672C\u6267\u884C\u5931\u8D25\u3002\u94FE\u63A5\u63D2\u5165\u6B65\u9AA4\u5C06\u88AB\u8DF3\u8FC7\u3002", 0);
            }
          }).open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u8BA1\u7B97\u7B14\u8BB0\u5185\u5BB9\u54C8\u5E0C\u503C (\u8BCA\u65AD\u7528)").setIcon("hash").onClick(() => {
          new CalculateHashModal(this.app, this, async (filePath) => {
            const normalizedFilePath = (0, import_obsidian.normalizePath)(filePath);
            const tFile = this.app.vault.getAbstractFileByPath(normalizedFilePath);
            if (!(tFile instanceof import_obsidian.TFile)) {
              new import_obsidian.Notice(`\u9519\u8BEF\uFF1A\u6587\u4EF6 "${normalizedFilePath}" \u672A\u627E\u5230\u6216\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u6587\u4EF6\u3002`);
              console.error(`JinaLinker: \u6587\u4EF6 "${normalizedFilePath}" \u672A\u627E\u5230\u6216\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u6587\u4EF6\uFF0C\u65E0\u6CD5\u8BA1\u7B97\u54C8\u5E0C\u3002`);
              return;
            }
            const hash = await this.calculateNoteContentHashForFile(tFile);
            if (hash) {
              new import_obsidian.Notice(`\u6587\u4EF6 "${filePath}" \u7684\u5185\u5BB9\u54C8\u5E0C\u503C: ${hash}`);
              console.log(`JinaLinker: \u6587\u4EF6 "${filePath}" \u7684\u5185\u5BB9\u54C8\u5E0C\u503C (SHA256): ${hash}`);
            }
          }).open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u66F4\u65B0\u5D4C\u5165\u6570\u636E\u4E2D\u7684\u7B14\u8BB0\u54C8\u5E0C\u503C").setIcon("refresh-cw").onClick(() => {
          new UpdateHashesModal(this.app, this, async (filePathsStr) => {
            const relativePaths = filePathsStr.split(",").map((p) => p.trim()).filter((p) => p);
            if (relativePaths.length === 0) {
              new import_obsidian.Notice("\u672A\u63D0\u4F9B\u6709\u6548\u7684\u6587\u4EF6\u8DEF\u5F84\u3002");
              return;
            }
            await this.updateHashesInEmbeddingsFile(relativePaths);
          }).open();
        });
      });
      menu.showAtMouseEvent(evt);
    });
    this.addCommand({
      id: "calculate-note-content-hash",
      name: "\u8BA1\u7B97\u7B14\u8BB0\u5185\u5BB9\u54C8\u5E0C\u503C (\u8BCA\u65AD\u7528)",
      callback: () => {
        new CalculateHashModal(this.app, this, async (filePath) => {
          const normalizedFilePath = (0, import_obsidian.normalizePath)(filePath);
          const tFile = this.app.vault.getAbstractFileByPath(normalizedFilePath);
          if (!(tFile instanceof import_obsidian.TFile)) {
            new import_obsidian.Notice(`\u9519\u8BEF\uFF1A\u6587\u4EF6 "${normalizedFilePath}" \u672A\u627E\u5230\u6216\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u6587\u4EF6\u3002`);
            console.error(`JinaLinker: \u6587\u4EF6 "${normalizedFilePath}" \u672A\u627E\u5230\u6216\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u6587\u4EF6\uFF0C\u65E0\u6CD5\u8BA1\u7B97\u54C8\u5E0C\u3002`);
            return;
          }
          const hash = await this.calculateNoteContentHashForFile(tFile);
          if (hash) {
            new import_obsidian.Notice(`\u6587\u4EF6 "${filePath}" \u7684\u5185\u5BB9\u54C8\u5E0C\u503C: ${hash}`);
            console.log(`JinaLinker: \u6587\u4EF6 "${filePath}" \u7684\u5185\u5BB9\u54C8\u5E0C\u503C (SHA256): ${hash}`);
          }
        }).open();
      }
    });
    this.addCommand({
      id: "update-hashes-in-embeddings-file",
      name: "\u66F4\u65B0\u5D4C\u5165\u6570\u636E\u4E2D\u7684\u7B14\u8BB0\u54C8\u5E0C\u503C",
      callback: () => {
        new UpdateHashesModal(this.app, this, async (filePathsStr) => {
          const relativePaths = filePathsStr.split(",").map((p) => p.trim()).filter((p) => p);
          if (relativePaths.length === 0) {
            new import_obsidian.Notice("\u672A\u63D0\u4F9B\u6709\u6548\u7684\u6587\u4EF6\u8DEF\u5F84\u3002");
            return;
          }
          await this.updateHashesInEmbeddingsFile(relativePaths);
        }).open();
      }
    });
    this.addSettingTab(new JinaLinkerSettingTab(this.app, this));
    new import_obsidian.Notice("Jina AI Linker \u63D2\u4EF6\u5DF2\u52A0\u8F7D\u3002");
  }
  onunload() {
    new import_obsidian.Notice("Jina AI Linker \u63D2\u4EF6\u5DF2\u5378\u8F7D\u3002");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  extractContentForHashingFromText(fullContent) {
    let bodyContentAfterFM = fullContent;
    const fmRegex = /^---\s*$\n([\s\S]*?)\n^---\s*$\n?/m;
    const fmMatch = fullContent.match(fmRegex);
    if (fmMatch) {
      bodyContentAfterFM = fullContent.substring(fmMatch[0].length);
    }
    const marker = HASH_BOUNDARY_MARKER;
    const markerIndex = bodyContentAfterFM.indexOf(marker);
    if (markerIndex !== -1) {
      let contentToHash = bodyContentAfterFM.substring(0, markerIndex);
      if (!contentToHash.trim()) {
        return "\n";
      }
      contentToHash = contentToHash.replace(/\r\n/g, "\n").replace(/\s+$/, "");
      return contentToHash + "\n";
    }
    return null;
  }
  async calculateNoteContentHashForFile(file) {
    try {
      const fileContent = await this.app.vault.read(file);
      const contentForHashing = this.extractContentForHashingFromText(fileContent);
      if (contentForHashing === null) {
        new import_obsidian.Notice(`\u9519\u8BEF: \u6587\u4EF6 "${file.path}" \u4E2D\u672A\u627E\u5230\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0 "${HASH_BOUNDARY_MARKER}" (\u5728 frontmatter \u4E4B\u540E)\u3002\u65E0\u6CD5\u8BA1\u7B97\u54C8\u5E0C\u3002`);
        console.warn(`JinaLinker: \u6587\u4EF6 "${file.path}" \u4E2D\u672A\u627E\u5230\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0 (\u5728 frontmatter \u4E4B\u540E)\u3002`);
        return null;
      }
      const hasher = crypto.createHash("sha256");
      hasher.update(contentForHashing, "utf-8");
      return hasher.digest("hex");
    } catch (error) {
      new import_obsidian.Notice(`\u8BA1\u7B97\u6587\u4EF6 "${file.path}" \u54C8\u5E0C\u65F6\u53D1\u751F\u9519\u8BEF: ${error.message}`);
      console.error(`JinaLinker: \u8BA1\u7B97\u6587\u4EF6 "${file.path}" \u54C8\u5E0C\u65F6\u53D1\u751F\u9519\u8BEF:`, error);
      return null;
    }
  }
  async updateHashesInEmbeddingsFile(targetRelativePaths) {
    new import_obsidian.Notice(`\u5F00\u59CB\u5904\u7406 ${targetRelativePaths.length} \u4E2A\u8DEF\u5F84\uFF0C\u66F4\u65B0\u54C8\u5E0C\u503C...`);
    const outputDirInVault = DEFAULT_OUTPUT_DIR_IN_VAULT;
    const embeddingsFilePath = (0, import_obsidian.normalizePath)(path.join(outputDirInVault, EMBEDDINGS_FILE_NAME));
    let embeddingsData;
    try {
      const fileExists = await this.app.vault.adapter.exists(embeddingsFilePath);
      if (!fileExists) {
        new import_obsidian.Notice(`\u9519\u8BEF: \u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u672A\u627E\u5230\u3002`);
        console.error(`JinaLinker: \u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u672A\u627E\u5230\u3002`);
        return;
      }
      const rawData = await this.app.vault.adapter.read(embeddingsFilePath);
      embeddingsData = JSON.parse(rawData);
      if (!embeddingsData.files || typeof embeddingsData.files !== "object") {
        throw new Error("\u5D4C\u5165\u6587\u4EF6\u7ED3\u6784\u4E0D\u6B63\u786E\uFF0C\u7F3A\u5C11 'files' \u5BF9\u8C61\u3002");
      }
    } catch (error) {
      new import_obsidian.Notice(`\u8BFB\u53D6\u6216\u89E3\u6790\u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u5931\u8D25: ${error.message}`);
      console.error(`JinaLinker: \u8BFB\u53D6\u6216\u89E3\u6790\u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u5931\u8D25:`, error);
      return;
    }
    let filesToProcess = [];
    for (const relPath of targetRelativePaths) {
      const normalizedRelPathKey = (0, import_obsidian.normalizePath)(relPath);
      const abstractFile = this.app.vault.getAbstractFileByPath(normalizedRelPathKey);
      if (!abstractFile) {
        new import_obsidian.Notice(`\u8B66\u544A: \u8DEF\u5F84 "${normalizedRelPathKey}" \u4E0D\u5B58\u5728\uFF0C\u8DF3\u8FC7\u3002`);
        console.warn(`JinaLinker: \u8DEF\u5F84 "${normalizedRelPathKey}" \u4E0D\u5B58\u5728\uFF0C\u8DF3\u8FC7\u3002`);
        continue;
      }
      if (abstractFile instanceof import_obsidian.TFolder) {
        console.log(`JinaLinker: \u5904\u7406\u6587\u4EF6\u5939 "${normalizedRelPathKey}"...`);
        const folderFiles = this.getMarkdownFilesInFolder(abstractFile);
        console.log(`JinaLinker: \u5728\u6587\u4EF6\u5939 "${normalizedRelPathKey}" \u4E2D\u627E\u5230 ${folderFiles.length} \u4E2AMarkdown\u6587\u4EF6\u3002`);
        filesToProcess = [...filesToProcess, ...folderFiles];
      } else if (abstractFile instanceof import_obsidian.TFile && abstractFile.extension === "md") {
        filesToProcess.push(abstractFile);
      } else {
        new import_obsidian.Notice(`\u8B66\u544A: \u8DEF\u5F84 "${normalizedRelPathKey}" \u4E0D\u662FMarkdown\u6587\u4EF6\u6216\u6587\u4EF6\u5939\uFF0C\u8DF3\u8FC7\u3002`);
        console.warn(`JinaLinker: \u8DEF\u5F84 "${normalizedRelPathKey}" \u4E0D\u662FMarkdown\u6587\u4EF6\u6216\u6587\u4EF6\u5939\uFF0C\u8DF3\u8FC7\u3002`);
      }
    }
    filesToProcess = Array.from(new Set(filesToProcess));
    new import_obsidian.Notice(`\u5171\u627E\u5230 ${filesToProcess.length} \u4E2AMarkdown\u6587\u4EF6\u9700\u8981\u5904\u7406...`);
    console.log(`JinaLinker: \u5171\u627E\u5230 ${filesToProcess.length} \u4E2AMarkdown\u6587\u4EF6\u9700\u8981\u5904\u7406\u3002`);
    let updatedJsonCount = 0;
    let notFoundInJsonCount = 0;
    let hashCalculationFailedCount = 0;
    let noChangeCount = 0;
    let updatedFrontmatterCount = 0;
    let processedCount = 0;
    for (const tFile of filesToProcess) {
      processedCount++;
      const normalizedFilePath = tFile.path;
      console.log(`JinaLinker: \u5904\u7406\u6587\u4EF6 (${processedCount}/${filesToProcess.length}): ${normalizedFilePath}`);
      const newHash = await this.calculateNoteContentHashForFile(tFile);
      if (!newHash) {
        console.warn(`JinaLinker: \u672A\u80FD\u4E3A\u6587\u4EF6 "${normalizedFilePath}" \u8BA1\u7B97\u65B0\u54C8\u5E0C\uFF0C\u8DF3\u8FC7\u3002`);
        hashCalculationFailedCount++;
        continue;
      }
      let jsonUpdated = false;
      if (embeddingsData.files.hasOwnProperty(normalizedFilePath)) {
        const entry = embeddingsData.files[normalizedFilePath];
        const oldHash = entry.hash;
        if (oldHash === newHash) {
          console.log(`JinaLinker: \u6587\u4EF6 "${normalizedFilePath}" \u5728JSON\u4E2D\u7684\u54C8\u5E0C\u503C (${newHash ? newHash.substring(0, 8) : "N/A"}...) \u5DF2\u662F\u6700\u65B0\u3002`);
        } else {
          console.log(`JinaLinker: \u66F4\u65B0JSON\u4E2D\u6587\u4EF6 "${normalizedFilePath}" \u7684\u54C8\u5E0C: ${oldHash ? oldHash.substring(0, 8) : "N/A"}... -> ${newHash ? newHash.substring(0, 8) : "N/A"}...`);
          entry.hash = newHash;
          entry.last_hash_updated_at = (/* @__PURE__ */ new Date()).toISOString();
          updatedJsonCount++;
          jsonUpdated = true;
        }
      } else {
        console.warn(`JinaLinker: \u5728\u5D4C\u5165JSON\u4E2D\u672A\u627E\u5230\u6587\u4EF6 "${normalizedFilePath}" \u7684\u6761\u76EE\u3002`);
        notFoundInJsonCount++;
      }
      try {
        const fileContent = await this.app.vault.read(tFile);
        const fmRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
        const fmMatch = fileContent.match(fmRegex);
        let newContent;
        let frontmatterUpdated = false;
        if (fmMatch) {
          const frontmatterContent = fmMatch[1];
          const jinaHashRegex = /^jina_hash:\s*(.*)\s*$/m;
          const jinaHashMatch = frontmatterContent.match(jinaHashRegex);
          if (jinaHashMatch) {
            const oldHash = jinaHashMatch[1].trim();
            if (oldHash !== newHash) {
              const newFrontmatter = frontmatterContent.replace(
                jinaHashRegex,
                `jina_hash: ${newHash}`
              );
              newContent = fileContent.replace(
                fmMatch[0],
                `---
${newFrontmatter}
---
`
              );
              frontmatterUpdated = true;
              const oldHashDisplay = oldHash ? oldHash.substring(0, 8) : "N/A";
              const newHashDisplay = newHash ? newHash.substring(0, 8) : "N/A";
              console.log(`JinaLinker: \u66F4\u65B0\u6587\u4EF6 "${normalizedFilePath}" frontmatter\u4E2D\u7684\u54C8\u5E0C: ${oldHashDisplay}... -> ${newHashDisplay}...`);
            } else {
              console.log(`JinaLinker: \u6587\u4EF6 "${normalizedFilePath}" frontmatter\u4E2D\u7684\u54C8\u5E0C\u503C\u5DF2\u662F\u6700\u65B0\u3002`);
            }
          } else {
            const newFrontmatter = frontmatterContent + `
jina_hash: ${newHash}`;
            newContent = fileContent.replace(
              fmMatch[0],
              `---
${newFrontmatter}
---
`
            );
            frontmatterUpdated = true;
            console.log(`JinaLinker: \u5728\u6587\u4EF6 "${normalizedFilePath}" frontmatter\u4E2D\u6DFB\u52A0\u54C8\u5E0C\u503C\u3002`);
          }
        } else {
          newContent = `---
jina_hash: ${newHash}
---

${fileContent}`;
          frontmatterUpdated = true;
          console.log(`JinaLinker: \u4E3A\u6587\u4EF6 "${normalizedFilePath}" \u521B\u5EFA\u5305\u542B\u54C8\u5E0C\u503C\u7684frontmatter\u3002`);
        }
        if (frontmatterUpdated && newContent) {
          await this.app.vault.modify(tFile, newContent);
          updatedFrontmatterCount++;
        } else {
          noChangeCount++;
        }
      } catch (error) {
        console.error(`JinaLinker: \u66F4\u65B0\u6587\u4EF6 "${normalizedFilePath}" frontmatter\u65F6\u51FA\u9519:`, error);
        new import_obsidian.Notice(`\u66F4\u65B0\u6587\u4EF6 "${normalizedFilePath}" frontmatter\u65F6\u51FA\u9519: ${error instanceof Error ? error.message : String(error)}`);
      }
    }
    if (updatedJsonCount > 0) {
      try {
        await this.app.vault.adapter.write(embeddingsFilePath, JSON.stringify(embeddingsData, null, 4));
        console.log(`JinaLinker: \u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u5DF2\u66F4\u65B0\u3002`);
      } catch (error) {
        new import_obsidian.Notice(`\u5199\u5165\u66F4\u65B0\u540E\u7684\u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u65F6\u53D1\u751F\u9519\u8BEF: ${error instanceof Error ? error.message : String(error)}`);
        console.error(`JinaLinker: \u5199\u5165\u66F4\u65B0\u540E\u7684\u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u65F6\u53D1\u751F\u9519\u8BEF:`, error);
        return;
      }
    }
    let summaryMsg;
    if (updatedJsonCount > 0 && updatedFrontmatterCount > 0) {
      summaryMsg = `\u6210\u529F\u66F4\u65B0\u4E86 ${updatedJsonCount} \u4E2A\u6587\u4EF6\u5728\u5D4C\u5165JSON\u4E2D\u7684\u54C8\u5E0C\u503C\u548C ${updatedFrontmatterCount} \u4E2A\u6587\u4EF6\u7684frontmatter\u3002`;
    } else if (updatedJsonCount > 0) {
      summaryMsg = `\u6210\u529F\u66F4\u65B0\u4E86 ${updatedJsonCount} \u4E2A\u6587\u4EF6\u5728\u5D4C\u5165JSON\u4E2D\u7684\u54C8\u5E0C\u503C\u3002`;
    } else if (updatedFrontmatterCount > 0) {
      summaryMsg = `\u6210\u529F\u66F4\u65B0\u4E86 ${updatedFrontmatterCount} \u4E2A\u6587\u4EF6\u7684frontmatter\u3002`;
    } else {
      summaryMsg = "\u6240\u6709\u54C8\u5E0C\u503C\u5747\u5DF2\u662F\u6700\u65B0\uFF0C\u65E0\u9700\u66F4\u65B0\u3002";
    }
    new import_obsidian.Notice(summaryMsg);
    console.log(`JinaLinker: ${summaryMsg}`);
    let detailedSummary = `\u54C8\u5E0C\u66F4\u65B0\u6458\u8981: ${updatedJsonCount} \u4E2AJSON\u5DF2\u66F4\u65B0, ${updatedFrontmatterCount} \u4E2Afrontmatter\u5DF2\u66F4\u65B0, ${noChangeCount} \u4E2A\u65E0\u9700\u66F4\u6539, ${notFoundInJsonCount} \u4E2A\u5728JSON\u4E2D\u672A\u627E\u5230, ${hashCalculationFailedCount} \u4E2A\u54C8\u5E0C\u8BA1\u7B97\u5931\u8D25\u3002`;
    console.log(`JinaLinker: ${detailedSummary}`);
    if (notFoundInJsonCount > 0 || hashCalculationFailedCount > 0) {
      new import_obsidian.Notice(detailedSummary, 7e3);
    }
  }
  // 递归获取文件夹中的所有Markdown文件
  getMarkdownFilesInFolder(folder) {
    let markdownFiles = [];
    const allFiles = this.app.vault.getAllLoadedFiles();
    for (const file of allFiles) {
      if (file instanceof import_obsidian.TFile && file.extension === "md" && file.path.startsWith(folder.path)) {
        markdownFiles.push(file);
      }
    }
    return markdownFiles;
  }
  async runPythonScript(scanPathFromModal, scoringModeFromModal) {
    return new Promise(async (resolve) => {
      let scriptToExecutePath = "";
      const vaultBasePath = this.app.vault.adapter.getBasePath();
      const bundledScriptName = "jina_obsidian_processor.py";
      if (this.manifest.dir) {
        scriptToExecutePath = path.join(vaultBasePath, this.manifest.dir, bundledScriptName);
      } else {
        new import_obsidian.Notice("JinaLinker \u9519\u8BEF: Python \u811A\u672C\u8DEF\u5F84\u65E0\u6CD5\u786E\u5B9A\u3002", 0);
        console.error("JinaLinker: Python \u811A\u672C\u8DEF\u5F84\u8BBE\u7F6E\u9519\u8BEF\u3002");
        resolve(false);
        return;
      }
      const outputDirInVault = DEFAULT_OUTPUT_DIR_IN_VAULT;
      const fullOutputDirPath = path.join(vaultBasePath, outputDirInVault);
      try {
        const fs = require("fs");
        if (!fs.existsSync(fullOutputDirPath)) {
          fs.mkdirSync(fullOutputDirPath, { recursive: true });
          console.log(`JinaLinker: \u5DF2\u521B\u5EFAJSON\u8F93\u51FA\u76EE\u5F55: ${outputDirInVault}`);
        }
      } catch (error) {
        console.error("JinaLinker: \u521B\u5EFA\u8F93\u51FA\u76EE\u5F55\u65F6\u53D1\u751F\u9519\u8BEF:", error);
        new import_obsidian.Notice(`JinaLinker: \u521B\u5EFA\u8F93\u51FA\u76EE\u5F55 "${outputDirInVault}" \u5931\u8D25\u3002\u8BF7\u68C0\u67E5\u6743\u9650\u3002`, 0);
        resolve(false);
        return;
      }
      let args = [
        scriptToExecutePath,
        "--project_root",
        vaultBasePath,
        "--output_dir",
        outputDirInVault,
        "--jina_api_key",
        this.settings.jinaApiKey,
        "--ai_scoring_mode",
        scoringModeFromModal,
        "--similarity_threshold",
        this.settings.similarityThreshold.toString(),
        "--jina_model_name",
        this.settings.jinaModelName,
        "--max_chars_for_jina",
        this.settings.maxCharsForJina.toString(),
        "--max_candidates_per_source_for_ai_scoring",
        this.settings.maxCandidatesPerSourceForAIScoring.toString(),
        "--hash_boundary_marker",
        HASH_BOUNDARY_MARKER.replace(/"/g, '\\"'),
        "--max_content_length_for_ai",
        this.settings.maxContentLengthForAI.toString()
      ];
      if (this.settings.deepseekApiKey) {
        args.push("--deepseek_api_key", this.settings.deepseekApiKey);
        args.push("--deepseek_model_name", this.settings.deepseekModelName);
      }
      if (scanPathFromModal && scanPathFromModal.trim() !== "/") {
        args.push("--scan_target_folders");
        const folders = scanPathFromModal.split(",").map((f) => f.trim()).filter((f) => f);
        args = args.concat(folders);
      }
      if (this.settings.excludedFolders) {
        args.push("--excluded_folders");
        const excludedFolders = this.settings.excludedFolders.split(",").map((f) => f.trim()).filter((f) => f);
        args = args.concat(excludedFolders);
      }
      if (this.settings.excludedFilesPatterns) {
        args.push("--excluded_files_patterns");
        const patterns = this.settings.excludedFilesPatterns.split(",").map((p) => p.trim()).filter((p) => p);
        args = args.concat(patterns);
      }
      new import_obsidian.Notice("JinaLinker: \u5F00\u59CB\u6267\u884C Python \u811A\u672C...", 5e3);
      console.log("JinaLinker: \u6B63\u5728\u542F\u52A8 Python \u811A\u672C\u3002\n\u547D\u4EE4:", this.settings.pythonPath, "\n\u53C2\u6570:", JSON.stringify(args, null, 2));
      const pythonProcess = (0, import_child_process.spawn)(this.settings.pythonPath, args, { stdio: ["pipe", "pipe", "pipe"] });
      let scriptOutput = "";
      let scriptError = "";
      pythonProcess.stdout.on("data", (data) => {
        const outputChunk = data.toString();
        scriptOutput += outputChunk;
        console.log(`JinaLinker Python (stdout): ${outputChunk.trim()}`);
      });
      pythonProcess.stderr.on("data", (data) => {
        const errorChunk = data.toString();
        scriptError += errorChunk;
        console.error(`JinaLinker Python (stderr): ${errorChunk.trim()}`);
      });
      pythonProcess.on("close", (code) => {
        console.log(`JinaLinker: Python \u811A\u672C\u6267\u884C\u5B8C\u6BD5\uFF0C\u9000\u51FA\u7801 ${code}.`);
        if (code === 0) {
          resolve(true);
        } else {
          new import_obsidian.Notice("JinaLinker: Python \u811A\u672C\u6267\u884C\u5931\u8D25\u3002\u8BE6\u60C5\u8BF7\u67E5\u770B\u5F00\u53D1\u8005\u63A7\u5236\u53F0\u3002", 0);
          resolve(false);
        }
      });
      pythonProcess.on("error", (err) => {
        console.error("JinaLinker: \u542F\u52A8 Python \u811A\u672C\u5931\u8D25:", err);
        new import_obsidian.Notice(`JinaLinker: \u542F\u52A8 Python \u811A\u672C\u5931\u8D25: ${err.message}\u3002\u8BF7\u68C0\u67E5 Python \u8DEF\u5F84\u662F\u5426\u6B63\u786E\u3002`, 0);
        resolve(false);
      });
    });
  }
  async insertAISuggestedLinksIntoNotes(targetFoldersOption) {
    try {
      const outputDirInVault = DEFAULT_OUTPUT_DIR_IN_VAULT;
      const embeddingsFilePath = (0, import_obsidian.normalizePath)(path.join(outputDirInVault, EMBEDDINGS_FILE_NAME));
      const fileExists = await this.app.vault.adapter.exists(embeddingsFilePath);
      if (!fileExists) {
        new import_obsidian.Notice(`\u9519\u8BEF: \u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u672A\u627E\u5230\u3002\u65E0\u6CD5\u63D2\u5165\u94FE\u63A5\u3002`, 0);
        console.error(`JinaLinker: \u5D4C\u5165\u6587\u4EF6 "${embeddingsFilePath}" \u672A\u627E\u5230\u3002\u65E0\u6CD5\u63D2\u5165\u94FE\u63A5\u3002`);
        return;
      }
      const rawEmbeddingsData = await this.app.vault.adapter.read(embeddingsFilePath);
      const embeddingsData = JSON.parse(rawEmbeddingsData);
      console.log("JinaLinker: \u5F00\u59CB 'insertAISuggestedLinksIntoNotes' \u6D41\u7A0B\u3002");
      new import_obsidian.Notice("\u6B63\u5728\u5904\u7406\u7B14\u8BB0\u4EE5\u63D2\u5165/\u66F4\u65B0\u5EFA\u8BAE\u94FE\u63A5 (\u5728 HASH_BOUNDARY \u4E4B\u540E)...", 3e3);
      const allMarkdownFiles = this.app.vault.getMarkdownFiles();
      let processedFileCount = 0;
      let updatedFileCount = 0;
      const targetFolderPaths = targetFoldersOption.split(",").map((p) => p.trim()).filter((p) => p);
      const shouldProcessAll = targetFolderPaths.length === 0 || targetFolderPaths.length === 1 && targetFolderPaths[0] === "/";
      console.log(`JinaLinker: \u5C06\u4E3A ${allMarkdownFiles.length} \u4E2A Markdown \u6587\u4EF6\u6267\u884C\u94FE\u63A5\u63D2\u5165 (\u9075\u5FAA\u76EE\u6807\u6587\u4EF6\u5939\u9009\u9879: '${targetFoldersOption || "\u4ED3\u5E93\u6839\u76EE\u5F55"}').`);
      for (const file of allMarkdownFiles) {
        let inTargetFolder = shouldProcessAll;
        if (!shouldProcessAll) {
          for (const targetFolder of targetFolderPaths) {
            const normalizedTarget = targetFolder.endsWith("/") ? targetFolder.slice(0, -1) : targetFolder;
            const filePathNormalized = file.path;
            if (filePathNormalized.startsWith(normalizedTarget + "/") || filePathNormalized === normalizedTarget) {
              inTargetFolder = true;
              break;
            }
          }
        }
        if (!inTargetFolder) {
          continue;
        }
        processedFileCount++;
        try {
          let fileContent = await this.app.vault.read(file);
          const originalFileContentForComparison = fileContent;
          const fmRegex = /^---\s*$\n([\s\S]*?)\n^---\s*$\n?/m;
          const fmMatch = fileContent.match(fmRegex);
          let bodyContent = fileContent;
          let frontmatterPart = "";
          if (fmMatch) {
            frontmatterPart = fmMatch[0];
            bodyContent = fileContent.substring(frontmatterPart.length);
          }
          const boundaryMarker = HASH_BOUNDARY_MARKER;
          let boundaryIndexInBody = bodyContent.indexOf(boundaryMarker);
          if (boundaryIndexInBody === -1) {
            const lines = bodyContent.split(/\r?\n/);
            let lastNonEmptyLineIndex = -1;
            for (let i = lines.length - 1; i >= 0; i--) {
              if (lines[i].trim().length > 0) {
                lastNonEmptyLineIndex = i;
                break;
              }
            }
            if (lastNonEmptyLineIndex !== -1) {
              lines.splice(lastNonEmptyLineIndex + 1, 0, boundaryMarker);
              bodyContent = lines.join("\n");
              boundaryIndexInBody = bodyContent.indexOf(boundaryMarker);
              console.log(`JinaLinker: \u5728 ${file.path} \u6DFB\u52A0\u4E86\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0\u3002`);
            } else {
              console.warn(`JinaLinker: ${file.path} \u6CA1\u6709\u4EFB\u4F55\u975E\u7A7A\u884C\uFF0C\u8DF3\u8FC7\u3002`);
              continue;
            }
          }
          const contentBeforeBoundary = bodyContent.substring(0, boundaryIndexInBody);
          let contentAfterBoundary = bodyContent.substring(boundaryIndexInBody + boundaryMarker.length);
          const sectionTitle = SUGGESTED_LINKS_TITLE;
          const startMarker = LINKS_START_MARKER;
          const endMarker = LINKS_END_MARKER;
          const linkSectionRegexWithDiv = new RegExp(`<div[^>]*>\\s*${escapeRegExp(sectionTitle)}\\s*${escapeRegExp(startMarker)}[\\s\\S]*?${escapeRegExp(endMarker)}\\s*<\\/div>`, "g");
          const linkSectionRegexSimple = new RegExp(`${escapeRegExp(sectionTitle)}\\s*${escapeRegExp(startMarker)}[\\s\\S]*?${escapeRegExp(endMarker)}`, "g");
          contentAfterBoundary = contentAfterBoundary.replace(linkSectionRegexWithDiv, "").replace(linkSectionRegexSimple, "");
          const fileCache = this.app.metadataCache.getFileCache(file);
          const frontmatter = fileCache == null ? void 0 : fileCache.frontmatter;
          const candidates = frontmatter && frontmatter[AI_JUDGED_CANDIDATES_FM_KEY] && Array.isArray(frontmatter[AI_JUDGED_CANDIDATES_FM_KEY]) ? frontmatter[AI_JUDGED_CANDIDATES_FM_KEY] : [];
          const linksToInsert = [];
          candidates.sort((a, b) => {
            const scoreA = a.aiScore !== void 0 ? a.aiScore : -Infinity;
            const scoreB = b.aiScore !== void 0 ? b.aiScore : -Infinity;
            if (scoreB !== scoreA)
              return scoreB - scoreA;
            return (b.jinaScore || 0) - (a.jinaScore || 0);
          });
          for (const cand of candidates) {
            if (linksToInsert.length >= this.settings.maxLinksToInsertPerNote)
              break;
            if (cand && typeof cand === "object" && cand.targetPath) {
              if (cand.aiScore === void 0 || cand.aiScore < this.settings.minAiScoreForLinkInsertion) {
                continue;
              }
              const targetTFile = this.app.vault.getAbstractFileByPath(cand.targetPath);
              if (targetTFile instanceof import_obsidian.TFile) {
                const linkText = this.app.metadataCache.fileToLinktext(targetTFile, file.path, true);
                linksToInsert.push(`- [[${linkText}]]`);
              } else {
                console.warn(`JinaLinker: \u76EE\u6807\u6587\u4EF6 ${cand.targetPath} \u5728\u4E3A ${file.path} \u751F\u6210\u94FE\u63A5\u65F6\u672A\u627E\u5230\u3002\u8DF3\u8FC7\u6B64\u94FE\u63A5\u3002`);
              }
            }
          }
          contentAfterBoundary = contentAfterBoundary.trim();
          let finalContent = "";
          if (frontmatterPart) {
            finalContent += frontmatterPart;
          }
          finalContent += contentBeforeBoundary + boundaryMarker;
          if (linksToInsert.length > 0) {
            const linksMarkdown = linksToInsert.join("\n");
            finalContent += `
${sectionTitle}
${startMarker}
${linksMarkdown}
${endMarker}`;
            if (contentAfterBoundary.length > 0) {
              finalContent += `

${contentAfterBoundary}`;
            }
          } else if (contentAfterBoundary.length > 0) {
            finalContent += `

${contentAfterBoundary}`;
          }
          if (finalContent !== originalFileContentForComparison) {
            await this.app.vault.modify(file, finalContent);
            updatedFileCount++;
            console.log(`JinaLinker: \u5DF2\u66F4\u65B0 ${file.path} \u4E2D\u7684\u94FE\u63A5\u3002`);
          }
        } catch (error) {
          console.error(`JinaLinker: \u5904\u7406\u6587\u4EF6 ${file.path} \u7684\u94FE\u63A5\u63D2\u5165\u65F6\u53D1\u751F\u9519\u8BEF:`, error);
          new import_obsidian.Notice(`\u66F4\u65B0 ${file.path} \u4E2D\u7684\u94FE\u63A5\u65F6\u51FA\u9519: ${error.message}`);
        }
      }
      const summaryMessage = `\u94FE\u63A5\u63D2\u5165\u5904\u7406\u5B8C\u6BD5\u3002\u5171\u68C0\u67E5 ${processedFileCount} \u4E2A\u6587\u4EF6\uFF0C\u66F4\u65B0\u4E86 ${updatedFileCount} \u4E2A\u6587\u4EF6\u3002`;
      console.log(`JinaLinker: ${summaryMessage}`);
      new import_obsidian.Notice(summaryMessage);
    } catch (error) {
      console.error(`JinaLinker: \u5904\u7406\u7B14\u8BB0\u63D2\u5165\u94FE\u63A5\u65F6\u53D1\u751F\u9519\u8BEF:`, error);
      new import_obsidian.Notice(`\u5904\u7406\u7B14\u8BB0\u63D2\u5165\u94FE\u63A5\u65F6\u51FA\u9519: ${error.message}`);
    }
  }
};
function escapeRegExp(string) {
  return string.replace(/[.*+\-?^{}()|[\\]\\]/g, "\\$&");
}
var JinaLinkerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Jina AI Linker \u63D2\u4EF6\u8BBE\u7F6E", cls: "jina-settings-header" });
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u57FA\u672C\u8BBE\u7F6E</div>';
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("Python \u89E3\u91CA\u5668\u8DEF\u5F84").setDesc("Python \u53EF\u6267\u884C\u6587\u4EF6\u7684\u547D\u4EE4\u6216\u5B8C\u6574\u8DEF\u5F84 (\u4F8B\u5982\uFF1Apython, python3, /usr/bin/python, C:\\Python39\\python.exe)").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.pythonPath).setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value.trim() || DEFAULT_SETTINGS.pythonPath;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">API \u5BC6\u94A5</div>';
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("Jina API \u5BC6\u94A5").setDesc("\u60A8\u7684 Jina AI API \u5BC6\u94A5\uFF0C\u7528\u4E8E\u751F\u6210\u6587\u672C\u5D4C\u5165\u5411\u91CF\u3002").addText((text) => {
      text.inputEl.type = "password";
      text.setPlaceholder("\u8F93\u5165 Jina API \u5BC6\u94A5").setValue(this.plugin.settings.jinaApiKey).onChange(async (value) => {
        this.plugin.settings.jinaApiKey = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("DeepSeek API \u5BC6\u94A5").setDesc("\u60A8\u7684 DeepSeek API \u5BC6\u94A5\uFF0C\u7528\u4E8E AI \u5BF9\u5019\u9009\u94FE\u63A5\u8FDB\u884C\u667A\u80FD\u8BC4\u5206 (\u53EF\u9009)\u3002").addText((text) => {
      text.inputEl.type = "password";
      text.setPlaceholder("\u8F93\u5165 DeepSeek API \u5BC6\u94A5 (\u53EF\u9009)").setValue(this.plugin.settings.deepseekApiKey).onChange(async (value) => {
        this.plugin.settings.deepseekApiKey = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">Python \u811A\u672C\u5904\u7406\u53C2\u6570</div>';
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("\u6392\u9664\u7684\u6587\u4EF6\u5939").setDesc("Python \u811A\u672C\u5904\u7406\u65F6\u8981\u6392\u9664\u7684\u6587\u4EF6\u5939\u540D\u79F0 (\u9017\u53F7\u5206\u9694\uFF0C\u4E0D\u533A\u5206\u5927\u5C0F\u5199)\u3002").addText(
      (text) => text.setPlaceholder("\u4F8B\u5982\uFF1A.archive, Temp, \u9644\u4EF6").setValue(this.plugin.settings.excludedFolders).onChange(async (value) => {
        this.plugin.settings.excludedFolders = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("\u6392\u9664\u7684\u6587\u4EF6\u6A21\u5F0F").setDesc("Python \u811A\u672C\u5904\u7406\u65F6\u8981\u6392\u9664\u7684\u6587\u4EF6\u540D Glob \u6A21\u5F0F (\u9017\u53F7\u5206\u9694)\u3002").addText(
      (text) => text.setPlaceholder("\u4F8B\u5982\uFF1A*.excalidraw, draft-*.md, ZK_*").setValue(this.plugin.settings.excludedFilesPatterns).onChange(async (value) => {
        this.plugin.settings.excludedFilesPatterns = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("Jina \u76F8\u4F3C\u5EA6\u9608\u503C").setDesc("Jina \u5D4C\u5165\u5411\u91CF\u4E4B\u95F4\u8BA1\u7B97\u4F59\u5F26\u76F8\u4F3C\u5EA6\u7684\u6700\u5C0F\u9608\u503C (0.0 \u5230 1.0)\uFF0C\u4F4E\u4E8E\u6B64\u9608\u503C\u7684\u7B14\u8BB0\u5BF9\u5C06\u4E0D\u88AB\u89C6\u4E3A\u5019\u9009\u94FE\u63A5\u3002").addText(
      (text) => text.setValue(this.plugin.settings.similarityThreshold.toString()).onChange(async (value) => {
        const num = parseFloat(value);
        if (!isNaN(num) && num >= 0 && num <= 1) {
          this.plugin.settings.similarityThreshold = num;
        } else {
          new import_obsidian.Notice("\u76F8\u4F3C\u5EA6\u9608\u503C\u5FC5\u987B\u662F 0.0 \u5230 1.0 \u4E4B\u95F4\u7684\u6570\u5B57\u3002");
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u9AD8\u7EA7\u6A21\u578B\u4E0E\u5185\u5BB9\u53C2\u6570</div>';
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("Jina \u6A21\u578B\u540D\u79F0").setDesc("\u7528\u4E8E\u751F\u6210\u5D4C\u5165\u7684 Jina \u6A21\u578B\u540D\u79F0\u3002").addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.jinaModelName).setValue(this.plugin.settings.jinaModelName).onChange(async (value) => {
        this.plugin.settings.jinaModelName = value.trim() || DEFAULT_SETTINGS.jinaModelName;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("Jina \u5D4C\u5165\u6700\u5927\u5B57\u7B26\u6570").setDesc("\u4F20\u9012\u7ED9 Jina API \u8FDB\u884C\u5D4C\u5165\u7684\u6587\u672C\u5185\u5BB9\u7684\u6700\u5927\u5B57\u7B26\u6570\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxCharsForJina)).setValue(this.plugin.settings.maxCharsForJina.toString()).onChange(async (value) => {
        this.plugin.settings.maxCharsForJina = parseInt(value) || DEFAULT_SETTINGS.maxCharsForJina;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("DeepSeek \u6A21\u578B\u540D\u79F0").setDesc("\u7528\u4E8E AI \u8BC4\u5206\u7684 DeepSeek \u6A21\u578B\u540D\u79F0\u3002").addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.deepseekModelName).setValue(this.plugin.settings.deepseekModelName).onChange(async (value) => {
        this.plugin.settings.deepseekModelName = value.trim() || DEFAULT_SETTINGS.deepseekModelName;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("AI \u8BC4\u5206\u5185\u5BB9\u6700\u5927\u957F\u5EA6").setDesc("\u4F20\u9012\u7ED9 DeepSeek API \u8FDB\u884C\u8BC4\u5206\u7684\u6BCF\u6761\u7B14\u8BB0\u5185\u5BB9\u7684\u6700\u5927\u5B57\u7B26\u6570\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxContentLengthForAI)).setValue(this.plugin.settings.maxContentLengthForAI.toString()).onChange(async (value) => {
        this.plugin.settings.maxContentLengthForAI = parseInt(value) || DEFAULT_SETTINGS.maxContentLengthForAI;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u6E90\u7B14\u8BB0\u9001\u4EA4 AI \u8BC4\u5206\u7684\u6700\u5927\u5019\u9009\u94FE\u63A5\u6570").setDesc("\u5BF9\u4E8E\u6BCF\u4E2A\u6E90\u7B14\u8BB0\uFF0C\u6309 Jina \u76F8\u4F3C\u5EA6\u4ECE\u9AD8\u5230\u4F4E\u6392\u5E8F\u540E\uFF0C\u6700\u591A\u9009\u62E9\u591A\u5C11\u4E2A\u5019\u9009\u94FE\u63A5\u53D1\u9001\u7ED9 AI\u8FDB\u884C\u8BC4\u5206\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxCandidatesPerSourceForAIScoring)).setValue(this.plugin.settings.maxCandidatesPerSourceForAIScoring.toString()).onChange(async (value) => {
        this.plugin.settings.maxCandidatesPerSourceForAIScoring = parseInt(value) || DEFAULT_SETTINGS.maxCandidatesPerSourceForAIScoring;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u94FE\u63A5\u63D2\u5165\u8BBE\u7F6E</div>';
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("\u94FE\u63A5\u63D2\u5165\u7684\u6700\u5C0F AI \u5206\u6570").setDesc("\u53EA\u6709 AI \u8BC4\u5206\u5927\u4E8E\u6216\u7B49\u4E8E\u6B64\u503C\u7684\u5019\u9009\u94FE\u63A5\u624D\u4F1A\u88AB\u63D2\u5165\u5230\u7B14\u8BB0\u4E2D\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.minAiScoreForLinkInsertion)).setValue(this.plugin.settings.minAiScoreForLinkInsertion.toString()).onChange(async (value) => {
        this.plugin.settings.minAiScoreForLinkInsertion = parseInt(value) || DEFAULT_SETTINGS.minAiScoreForLinkInsertion;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u4E2A\u7B14\u8BB0\u6700\u591A\u63D2\u5165\u7684\u94FE\u63A5\u6570").setDesc("\u5BF9\u4E8E\u6BCF\u4E2A\u7B14\u8BB0\uFF0C\u6700\u591A\u63D2\u5165\u591A\u5C11\u6761\u7B26\u5408\u6761\u4EF6\u7684\u5EFA\u8BAE\u94FE\u63A5\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxLinksToInsertPerNote)).setValue(this.plugin.settings.maxLinksToInsertPerNote.toString()).onChange(async (value) => {
        this.plugin.settings.maxLinksToInsertPerNote = parseInt(value) || DEFAULT_SETTINGS.maxLinksToInsertPerNote;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div style="margin-top: 2em; color: var(--text-muted); font-size: 0.9em;">Jina AI Linker v' + this.plugin.manifest.version + "</div>";
  }
};
