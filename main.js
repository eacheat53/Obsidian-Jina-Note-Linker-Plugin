/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JinaLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian14 = require("obsidian");

// models/constants.ts
var HASH_BOUNDARY_MARKER = "<!-- HASH_BOUNDARY -->";
var SUGGESTED_LINKS_TITLE = "## \u5EFA\u8BAE\u94FE\u63A5";
var LINKS_START_MARKER = "<!-- LINKS_START -->";
var LINKS_END_MARKER = "<!-- LINKS_END -->";
var DEFAULT_OUTPUT_DIR_IN_VAULT = ".jina-linker";
var DEFAULT_AI_MODELS = {
  deepseek: {
    provider: "deepseek",
    apiUrl: "https://api.deepseek.com/chat/completions",
    apiKey: "",
    modelName: "deepseek-chat",
    enabled: true
  },
  openai: {
    provider: "openai",
    apiUrl: "https://api.openai.com/v1/chat/completions",
    apiKey: "",
    modelName: "gpt-4o-mini",
    enabled: false
  },
  claude: {
    provider: "claude",
    apiUrl: "https://api.anthropic.com/v1/messages",
    apiKey: "",
    modelName: "claude-3-haiku-20240307",
    enabled: false
  },
  gemini: {
    provider: "gemini",
    apiUrl: "https://generativelanguage.googleapis.com/v1beta/models",
    apiKey: "",
    modelName: "gemini-1.5-flash",
    enabled: false
  },
  custom: {
    provider: "custom",
    apiUrl: "",
    apiKey: "",
    modelName: "",
    enabled: false
  }
};

// models/settings.ts
var DEFAULT_SCORING_PROMPT = `\u4F5C\u4E3A\u7B14\u8BB0\u5173\u8054\u6027\u8BC4\u5206\u4E13\u5BB6\uFF0C\u8BF7\u8BC4\u4F30\u4EE5\u4E0B\u591A\u5BF9\u5185\u5BB9\u7684\u5173\u8054\u5EA6\u3002\u8FD9\u4E9B\u5185\u5BB9\u53EF\u80FD\u5305\u62EC\u77E5\u8BC6\u7B14\u8BB0\u3001\u8BD7\u6B4C\u521B\u4F5C\u3001\u7075\u611F\u7247\u6BB5\u3001\u6563\u6587\u3001\u60C5\u611F\u8BB0\u5F55\u7B49\u591A\u6837\u5316\u5F62\u5F0F\u3002\u5BF9\u6BCF\u5BF9\u5185\u5BB9\u7ED9\u51FA0-10\u7684\u6574\u6570\u8BC4\u5206\uFF0C\u57FA\u4E8E\u4EE5\u4E0B\u5168\u9762\u6807\u51C6\uFF1A

\u3010\u8BC4\u5206\u6807\u51C6\uFF1A\u3011
10\u5206 - \u6DF1\u5EA6\u5173\u8054\uFF1A
  \u2022 \u5185\u5BB9\u95F4\u5B58\u5728\u660E\u663E\u7684\u601D\u60F3\u3001\u60C5\u611F\u6216\u610F\u8C61\u5171\u9E23
  \u2022 \u4E00\u7BC7\u5185\u5BB9\u76F4\u63A5\u542F\u53D1\u3001\u5EF6\u4F38\u6216\u56DE\u5E94\u53E6\u4E00\u7BC7
  \u2022 \u4E24\u7BC7\u5F62\u6210\u5B8C\u6574\u7684\u8868\u8FBE\u6574\u4F53\uFF0C\u5171\u540C\u6784\u5EFA\u4E00\u4E2A\u66F4\u4E30\u5BCC\u7684\u610F\u5883\u6216\u601D\u60F3
  \u2022 \u540C\u65F6\u9605\u8BFB\u4F1A\u4EA7\u751F"\u554A\u54C8"\u65F6\u523B\uFF0C\u5E26\u6765\u65B0\u7684\u9886\u609F

8-9\u5206 - \u5F3A\u70C8\u5173\u8054\uFF1A
  \u2022 \u5171\u4EAB\u6838\u5FC3\u60C5\u611F\u3001\u610F\u8C61\u6216\u4E3B\u9898
  \u2022 \u8868\u8FBE\u76F8\u4F3C\u7684\u601D\u60F3\u4F46\u901A\u8FC7\u4E0D\u540C\u89D2\u5EA6\u6216\u5F62\u5F0F
  \u2022 \u521B\u4F5C\u80CC\u666F\u6216\u7075\u611F\u6765\u6E90\u7D27\u5BC6\u76F8\u8FDE
  \u2022 \u4E00\u7BC7\u53EF\u4EE5\u6DF1\u5316\u5BF9\u53E6\u4E00\u7BC7\u7684\u7406\u89E3\u548C\u6B23\u8D4F

6-7\u5206 - \u660E\u663E\u5173\u8054\uFF1A
  \u2022 \u5B58\u5728\u6E05\u6670\u7684\u4E3B\u9898\u6216\u60C5\u7EEA\u8FDE\u63A5
  \u2022 \u4F7F\u7528\u76F8\u4F3C\u7684\u610F\u8C61\u6216\u8868\u8FBE\u65B9\u5F0F
  \u2022 \u5173\u8054\u70B9\u8DB3\u591F\u4E30\u5BCC\uFF0C\u80FD\u6FC0\u53D1\u65B0\u7684\u601D\u8003
  \u2022 \u5E76\u7F6E\u9605\u8BFB\u80FD\u591F\u4E30\u5BCC\u6574\u4F53\u4F53\u9A8C

4-5\u5206 - \u4E2D\u7B49\u5173\u8054\uFF1A
  \u2022 \u6709\u4E00\u4E9B\u5171\u901A\u5143\u7D20\uFF0C\u4F46\u6574\u4F53\u8D70\u5411\u4E0D\u540C
  \u2022 \u67D0\u4E9B\u7247\u6BB5\u6216\u610F\u8C61\u5B58\u5728\u547C\u5E94\uFF0C\u4F46\u4E0D\u662F\u4E3B\u4F53
  \u2022 \u5173\u8054\u66F4\u52A0\u5FAE\u5999\u6216\u9700\u8981\u4E00\u5B9A\u89E3\u8BFB
  \u2022 \u94FE\u63A5\u53EF\u80FD\u5BF9\u90E8\u5206\u8BFB\u8005\u6709\u542F\u53D1\u4EF7\u503C

2-3\u5206 - \u8F7B\u5FAE\u5173\u8054\uFF1A
  \u2022 \u5173\u8054\u4EC5\u9650\u4E8E\u8868\u9762\u672F\u8BED\u6216\u96F6\u661F\u6982\u5FF5
  \u2022 \u4E3B\u9898\u3001\u98CE\u683C\u6216\u60C5\u611F\u57FA\u8C03\u5927\u4E0D\u76F8\u540C
  \u2022 \u8054\u7CFB\u9700\u8981\u523B\u610F\u5BFB\u627E\u624D\u80FD\u53D1\u73B0
  \u2022 \u94FE\u63A5\u4EF7\u503C\u6709\u9650\uFF0C\u5927\u591A\u6570\u8BFB\u8005\u96BE\u4EE5\u5BDF\u89C9\u5173\u8054

0-1\u5206 - \u51E0\u4E4E\u65E0\u5173\u8054\uFF1A
  \u2022 \u5185\u5BB9\u3001\u4E3B\u9898\u3001\u610F\u8C61\u51E0\u4E4E\u5B8C\u5168\u4E0D\u540C
  \u2022 \u65E0\u6CD5\u627E\u5230\u660E\u663E\u7684\u601D\u60F3\u6216\u60C5\u611F\u8FDE\u63A5
  \u2022 \u94FE\u63A5\u4E0D\u4F1A\u4E3A\u8BFB\u8005\u7406\u89E3\u4EFB\u4E00\u5185\u5BB9\u589E\u6DFB\u4EF7\u503C
  \u2022 \u5E76\u7F6E\u9605\u8BFB\u65E0\u6CD5\u4EA7\u751F\u6709\u610F\u4E49\u7684\u5173\u8054\u6216\u542F\u53D1

\u8BF7\u53EA\u56DE\u590D\u4E00\u4E2A0-10\u7684\u6574\u6570\u8BC4\u5206\uFF0C\u4E0D\u8981\u6709\u4EFB\u4F55\u89E3\u91CA\u6216\u989D\u5916\u6587\u5B57\uFF01`;
var DEFAULT_TAG_PROMPT = `\u4F60\u662F\u4E00\u4F4D\u77E5\u8BC6\u7BA1\u7406\u4E0E\u5361\u7247\u7B14\u8BB0\u6CD5\uFF08Zettelkasten\uFF09\u4E13\u5BB6\uFF0C\u64C5\u957F\u6784\u5EFA\u7ED3\u6784\u6E05\u6670\u3001\u6613\u4E8E\u8FDE\u63A5\u548C\u68C0\u7D22\u7684\u4E2A\u4EBA\u77E5\u8BC6\u5E93\u3002

\u4F60\u7684\u4EFB\u52A1\u662F\uFF1A\u9488\u5BF9\u6211\u63D0\u4F9B\u7684\u6BCF\u4E00\u7BC7\u7B14\u8BB0\u6B63\u6587\uFF0C\u4E3A\u5176\u751F\u6210\u4E00\u7EC4\u7CBE\u51C6\u3001\u7CBE\u70BC\u4E14\u5177\u6709\u7CFB\u7EDF\u6027\u7684\u300C\u4E2D\u6587\u6807\u7B7E\u300D\u3002\u8FD9\u4E9B\u6807\u7B7E\u5E94\u63ED\u793A\u7B14\u8BB0\u7684\u6838\u5FC3\u601D\u60F3\uFF0C\u5E76\u5E2E\u52A9\u6211\u5C06\u5176\u878D\u5165\u5230\u66F4\u5E7F\u9614\u7684\u77E5\u8BC6\u7F51\u7EDC\u4E2D\u3002

\u8BF7\u4E25\u683C\u9075\u5FAA\u4EE5\u4E0B\u539F\u5219\uFF1A
1. \u3010\u6838\u5FC3\u4E3B\u9898\u3011\u8BC6\u522B\u7B14\u8BB0\u6700\u5173\u952E\u3001\u6700\u6838\u5FC3\u7684\u4E3B\u9898\u6216\u5173\u952E\u8BCD\u3002
2. \u3010\u62BD\u8C61\u6982\u5FF5\u3011\u63D0\u70BC\u80FD\u62BD\u8C61\u51FA\u66F4\u9AD8\u5C42\u6B21\u601D\u60F3\u7684\u6982\u5FF5\u3002
3. \u3010\u77E5\u8BC6\u9886\u57DF\u3011\u5C3D\u91CF\u4F7F\u7528\u5206\u5C42\u6807\u7B7E\u5B9A\u4F4D\u77E5\u8BC6\u9886\u57DF\uFF0C\u683C\u5F0F\u5982\uFF1A\u54F2\u5B66/\u53E4\u5E0C\u814A\u54F2\u5B66\u3001\u8BA1\u7B97\u673A\u79D1\u5B66/\u4EBA\u5DE5\u667A\u80FD\u3002
4. \u3010\u5173\u8054\u6027\u3011\u601D\u8003\u672C\u7B14\u8BB0\u53EF\u4E0E\u54EA\u4E9B\u4E3B\u9898\u4EA7\u751F\u6709\u610F\u4E49\u7684\u8FDE\u63A5\u3002

\u8F93\u51FA\u89C4\u5219\uFF1A
\u2022 \u6BCF\u7BC7\u7B14\u8BB0\u6700\u591A 5 \u4E2A\u6807\u7B7E\uFF1B
\u2022 \u6807\u7B7E\u5168\u90E8\u4F7F\u7528\u4E2D\u6587\uFF1B
\u2022 \u6807\u7B7E\u4E4B\u95F4\u4F7F\u7528\u82F1\u6587\u9017\u53F7","\u5206\u9694\uFF0C\u9017\u53F7\u540E\u4E0D\u52A0\u7A7A\u683C\uFF1B
\u2022 \u6BCF\u4E2A\u6807\u7B7E\u5185\u90E8\u4E0D\u5F97\u5305\u542B\u7A7A\u683C\uFF1B
\u2022 \u53EA\u56DE\u590D\u4E00\u884C\uFF0C\u4E14\u4E25\u683C\u4F7F\u7528\u4EE5\u4E0B\u683C\u5F0F\uFF08\u6CE8\u610F\u5192\u53F7\u540E\u6709\u4E00\u4E2A\u7A7A\u683C\uFF09\uFF1A
  <\u7B14\u8BB0\u6807\u9898>: \u6807\u7B7E1,\u6807\u7B7E2,\u6807\u7B7E3

\u9664\u4E86\u8FD9\u884C\u6807\u7B7E\u4FE1\u606F\u4E4B\u5916\uFF0C\u4E0D\u8981\u8F93\u51FA\u4EFB\u4F55\u989D\u5916\u7684\u8BF4\u660E\u3001\u89E3\u91CA\u6216\u591A\u4F59\u6587\u5B57\uFF01`;
var DEFAULT_SETTINGS = {
  pythonPath: "",
  jinaApiKey: "",
  aiModels: { ...DEFAULT_AI_MODELS },
  selectedAIProvider: "deepseek",
  similarityThreshold: 0.7,
  excludedFolders: ".obsidian, Scripts, assets, Excalidraw, .trash, Templates, 20_\u5DF4\u522B\u5854/\u97F3\u4E50",
  excludedFilesPatterns: "*excalidraw*, Templates*.md, *.kanban.md, ^moc$, ^index$",
  defaultScanPath: "/",
  jinaModelName: "jina-embeddings-v3",
  maxCharsForJina: 8e3,
  maxContentLengthForAI: 5e3,
  maxCandidatesPerSourceForAIScoring: 20,
  minAiScoreForLinkInsertion: 6,
  maxLinksToInsertPerNote: 10,
  dataMigrationCompleted: true,
  customScoringPrompt: DEFAULT_SCORING_PROMPT,
  useCustomScoringPrompt: false,
  // 批量处理默认设置
  maxPairsPerRequest: 10,
  maxCharsPerNote: 2e3,
  maxTotalCharsPerRequest: 23e3,
  // 标签生成默认
  tagsMode: "smart",
  maxTagsPerNote: 5,
  useCustomTagPrompt: false,
  customTagPrompt: DEFAULT_TAG_PROMPT
};

// utils/performance-monitor.ts
var PerformanceMonitor = class {
  constructor() {
    this.metrics = /* @__PURE__ */ new Map();
  }
  startTimer(operation) {
    const start = performance.now();
    return () => {
      const duration = performance.now() - start;
      this.recordMetric(operation, duration);
    };
  }
  recordMetric(operation, duration) {
    if (!this.metrics.has(operation)) {
      this.metrics.set(operation, []);
    }
    const times = this.metrics.get(operation);
    times.push(duration);
    if (times.length > 100) {
      times.shift();
    }
  }
  getAverageTime(operation) {
    const times = this.metrics.get(operation) || [];
    if (times.length === 0)
      return 0;
    return times.reduce((a, b) => a + b, 0) / times.length;
  }
  getMetricsSummary() {
    const summary = {};
    for (const [operation, times] of this.metrics.entries()) {
      summary[operation] = {
        avg: this.getAverageTime(operation),
        count: times.length
      };
    }
    return summary;
  }
};

// utils/cache-manager.ts
var CacheManager = class {
  constructor() {
    this.fileContentCache = /* @__PURE__ */ new Map();
  }
  async getCachedFileContent(file, vault, forceRefresh = false) {
    const mtime = file.stat.mtime;
    const cached = this.fileContentCache.get(file.path);
    if (!forceRefresh && cached && cached.mtime === mtime) {
      return cached.content;
    }
    const content = await vault.read(file);
    this.fileContentCache.set(file.path, { content, mtime });
    if (this.fileContentCache.size > 100) {
      const firstKey = this.fileContentCache.keys().next().value;
      this.fileContentCache.delete(firstKey);
    }
    return content;
  }
  clearCache() {
    this.fileContentCache.clear();
  }
  getCacheSize() {
    return this.fileContentCache.size;
  }
};

// utils/python-bridge.ts
var import_child_process = require("child_process");
var path = __toESM(require("path"));

// utils/error-handler.ts
var import_obsidian = require("obsidian");
function createProcessingError(type, message, details) {
  const suggestions = [];
  switch (type) {
    case "PYTHON_NOT_FOUND":
      suggestions.push("\u8BF7\u68C0\u67E5Python\u8DEF\u5F84\u8BBE\u7F6E\u662F\u5426\u6B63\u786E");
      suggestions.push("\u786E\u4FDDPython\u5DF2\u6B63\u786E\u5B89\u88C5\u5E76\u5728PATH\u4E2D");
      break;
    case "API_KEY_INVALID":
      suggestions.push("\u8BF7\u68C0\u67E5API\u5BC6\u94A5\u662F\u5426\u6B63\u786E\u914D\u7F6E");
      suggestions.push("\u786E\u8BA4API\u5BC6\u94A5\u6709\u6548\u4E14\u672A\u8FC7\u671F");
      break;
  }
  return { type, message, details, suggestions };
}
function log(level, message, data) {
  const timestamp = (/* @__PURE__ */ new Date()).toISOString();
  const logEntry = `[${timestamp}] [${level.toUpperCase()}] JinaLinker: ${message}`;
  switch (level) {
    case "error":
      console.error(logEntry, data);
      break;
    case "warn":
      console.warn(logEntry, data);
      break;
    default:
      console.log(logEntry, data);
  }
}

// utils/notification-service.ts
var import_obsidian2 = require("obsidian");
var NotificationService = class {
  constructor() {
    // 活动通知
    this.activeNotice = null;
    this.progressNotice = null;
    // 最后通知时间戳，用于限制通知频率
    this.lastNoticeTime = 0;
    this.minNoticeInterval = 1e3;
    // 最小通知间隔（毫秒）
    // 进度通知相关
    this.currentOperation = "";
    this.operationStartTime = 0;
    this.totalItems = 0;
    this.processedItems = 0;
    this.noticeDebounceTimer = null;
  }
  /**
   * 获取通知服务实例
   */
  static getInstance() {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }
  /**
   * 显示通知
   * @param message 通知消息
   * @param duration 持续时间（毫秒），0表示永久显示直到用户关闭
   */
  showNotice(message, duration = 3e3) {
    if (this.activeNotice) {
      this.activeNotice.hide();
      this.activeNotice = null;
    }
    const now = Date.now();
    if (now - this.lastNoticeTime < this.minNoticeInterval) {
      return;
    }
    this.lastNoticeTime = now;
    this.activeNotice = new import_obsidian2.Notice(message, duration);
  }
  /**
   * 开始一个进度操作
   * @param operationName 操作名称
   * @param totalItems 总项目数
   */
  startProgress(operationName, totalItems) {
    this.currentOperation = operationName;
    this.operationStartTime = Date.now();
    this.totalItems = totalItems;
    this.processedItems = 0;
    if (this.progressNotice) {
      this.progressNotice.hide();
    }
    this.progressNotice = new import_obsidian2.Notice(`\u{1F4CA} ${operationName} (0/${totalItems})`, 0);
  }
  /**
   * 更新进度
   * @param processed 已处理的项目数
   * @param message 附加消息
   */
  updateProgress(processed, message = "") {
    this.processedItems = processed;
    if (this.noticeDebounceTimer) {
      clearTimeout(this.noticeDebounceTimer);
    }
    this.noticeDebounceTimer = setTimeout(() => {
      if (processed === this.totalItems || processed % Math.max(1, Math.floor(this.totalItems / 10)) === 0) {
        const percent = Math.floor(processed / this.totalItems * 100);
        if (this.progressNotice) {
          this.progressNotice.hide();
        }
        const progressText = message ? `\u{1F4CA} ${this.currentOperation} (${processed}/${this.totalItems}, ${percent}%) - ${message}` : `\u{1F4CA} ${this.currentOperation} (${processed}/${this.totalItems}, ${percent}%)`;
        this.progressNotice = new import_obsidian2.Notice(progressText, 0);
      }
    }, 300);
  }
  /**
   * 完成进度操作
   * @param message 完成消息
   */
  completeProgress(message) {
    const duration = ((Date.now() - this.operationStartTime) / 1e3).toFixed(1);
    if (this.progressNotice) {
      this.progressNotice.hide();
      this.progressNotice = null;
    }
    if (this.noticeDebounceTimer) {
      clearTimeout(this.noticeDebounceTimer);
      this.noticeDebounceTimer = null;
    }
    const completeMessage = `\u2705 ${message} (\u7528\u65F6: ${duration}\u79D2)`;
    this.showNotice(completeMessage, 5e3);
  }
  /**
   * 显示错误消息
   * @param message 错误消息
   */
  showError(message) {
    if (this.progressNotice) {
      this.progressNotice.hide();
      this.progressNotice = null;
    }
    const errorMessage = `\u274C ${message}`;
    this.showNotice(errorMessage, 0);
  }
};

// utils/python-bridge.ts
var PythonBridge = class {
  constructor(settings) {
    this.settings = settings;
    this.currentOperation = null;
    this.notificationService = NotificationService.getInstance();
  }
  cancelOperation() {
    if (this.currentOperation) {
      this.currentOperation.abort();
      this.currentOperation = null;
      log("info", "\u7528\u6237\u53D6\u6D88\u4E86\u5F53\u524D\u64CD\u4F5C");
    }
  }
  async runPythonScript(scanPathFromModal, scoringModeFromModal, manifestDir, vaultBasePath) {
    log("info", "\u5F00\u59CB\u6267\u884C\uFF1APython CLI \u5904\u7406");
    log("info", `\u626B\u63CF\u8DEF\u5F84: ${scanPathFromModal}`);
    log("info", `AI\u8BC4\u5206\u6A21\u5F0F: ${scoringModeFromModal}`);
    try {
      this.currentOperation = new AbortController();
      return new Promise(async (resolve) => {
        var _a;
        if (!manifestDir) {
          const error = createProcessingError("FILE_NOT_FOUND", "\u65E0\u6CD5\u786E\u5B9A\u63D2\u4EF6\u76EE\u5F55\u4EE5\u5B9A\u4F4D cli.py");
          resolve({ success: false, error });
          return;
        }
        const pythonExe = this.settings.pythonPath || "python";
        const scriptPath = path.join(vaultBasePath, manifestDir, "python_src", "cli.py");
        const outputDirInVault = DEFAULT_OUTPUT_DIR_IN_VAULT;
        const fullOutputDirPath = path.join(vaultBasePath, outputDirInVault);
        try {
          const fs = require("fs");
          if (!fs.existsSync(fullOutputDirPath)) {
            fs.mkdirSync(fullOutputDirPath, { recursive: true });
          }
        } catch (error) {
          const processingError = createProcessingError(
            "PERMISSION_DENIED",
            `\u521B\u5EFA\u8F93\u51FA\u76EE\u5F55 "${outputDirInVault}" \u5931\u8D25`,
            error instanceof Error ? error.message : String(error)
          );
          resolve({ success: false, error: processingError });
          return;
        }
        let args = [
          "--project_root",
          vaultBasePath,
          "--output_dir",
          outputDirInVault,
          "--jina_api_key",
          this.settings.jinaApiKey,
          "--ai_scoring_mode",
          scoringModeFromModal,
          "--similarity_threshold",
          this.settings.similarityThreshold.toString(),
          "--jina_model_name",
          this.settings.jinaModelName,
          "--max_chars_for_jina",
          this.settings.maxCharsForJina.toString(),
          "--max_content_length_for_ai",
          this.settings.maxContentLengthForAI.toString(),
          "--ai_scoring_batch_size",
          this.settings.maxPairsPerRequest.toString(),
          "--max_chars_per_note",
          this.settings.maxCharsPerNote.toString(),
          "--max_total_chars_per_request",
          this.settings.maxTotalCharsPerRequest.toString(),
          "--export_json"
        ];
        const selectedAIModel = this.settings.aiModels[this.settings.selectedAIProvider];
        if (selectedAIModel && selectedAIModel.enabled && selectedAIModel.apiKey) {
          args.push("--ai_provider", this.settings.selectedAIProvider);
          args.push("--ai_api_url", selectedAIModel.apiUrl);
          args.push("--ai_api_key", selectedAIModel.apiKey);
          args.push("--ai_model_name", selectedAIModel.modelName);
        }
        if (this.settings.useCustomScoringPrompt) {
          args.push("--use_custom_scoring_prompt");
          args.push("--custom_scoring_prompt", this.settings.customScoringPrompt);
        }
        args.push("--tags_mode", this.settings.tagsMode);
        log("info", `\u6807\u7B7E\u6A21\u5F0F: ${this.settings.tagsMode}`);
        if (this.settings.useCustomTagPrompt) {
          args.push("--use_custom_scoring_prompt");
          args.push("--custom_scoring_prompt", this.settings.customTagPrompt);
        }
        if (scanPathFromModal && scanPathFromModal.trim() !== "/") {
          args.push("--scan_target_folders");
          const folders = scanPathFromModal.split(",").map((f) => f.trim()).filter((f) => f);
          args = args.concat(folders);
        }
        if (this.settings.excludedFolders) {
          args.push("--excluded_folders");
          const excludedFolders = this.settings.excludedFolders.split(",").map((f) => f.trim()).filter((f) => f);
          args = args.concat(excludedFolders);
        }
        if (this.settings.excludedFilesPatterns) {
          args.push("--excluded_files_patterns");
          const patterns = this.settings.excludedFilesPatterns.split(",").map((p) => p.trim()).filter((p) => p);
          args = args.concat(patterns);
        }
        this.notificationService.showNotice("\u{1F680} JinaLinker: \u5F00\u59CB\u6267\u884C\u540E\u7AEF\u7A0B\u5E8F...", 5e3);
        log("info", `\u6267\u884C\u540E\u7AEF\u7A0B\u5E8F: ${pythonExe} ${[scriptPath, ...this.sanitizeArgsForLog(args)].join(" ")}`);
        const pythonProcess = (0, import_child_process.spawn)(pythonExe, [scriptPath, ...args], {
          stdio: ["pipe", "pipe", "pipe"],
          signal: (_a = this.currentOperation) == null ? void 0 : _a.signal
        });
        this.handlePythonProcessOutput(pythonProcess, resolve);
      });
    } catch (error) {
      const processingError = createProcessingError(
        "UNKNOWN",
        "\u6267\u884CPython\u811A\u672C\u65F6\u53D1\u751F\u672A\u77E5\u9519\u8BEF",
        error instanceof Error ? error.message : String(error)
      );
      return { success: false, error: processingError };
    }
  }
  handlePythonProcessOutput(pythonProcess, resolve) {
    var _a, _b, _c;
    let scriptOutput = "";
    let scriptError = "";
    let lastProgressUpdate = 0;
    const progressUpdateInterval = 500;
    let currentProgress = 0;
    let totalFiles = 0;
    let operationStarted = false;
    (_a = pythonProcess.stdout) == null ? void 0 : _a.on("data", (data) => {
      var _a2;
      if ((_a2 = this.currentOperation) == null ? void 0 : _a2.signal.aborted)
        return;
      const outputChunk = data.toString();
      scriptOutput += outputChunk;
      log("info", `\u540E\u7AEF\u8F93\u51FA: ${outputChunk.trim()}`);
      const progressMatch = outputChunk.match(/处理 (\d+)\/(\d+) 个文件/);
      if (progressMatch) {
        const processed = parseInt(progressMatch[1]);
        const total = parseInt(progressMatch[2]);
        if (!operationStarted) {
          operationStarted = true;
          this.notificationService.startProgress("\u5904\u7406\u6587\u4EF6", total);
          totalFiles = total;
          lastProgressUpdate = Date.now();
        }
        currentProgress = processed;
        const now = Date.now();
        if (now - lastProgressUpdate >= progressUpdateInterval || processed === total) {
          lastProgressUpdate = now;
          this.notificationService.updateProgress(processed);
        }
      }
    });
    (_b = pythonProcess.stderr) == null ? void 0 : _b.on("data", (data) => {
      var _a2;
      if ((_a2 = this.currentOperation) == null ? void 0 : _a2.signal.aborted)
        return;
      const errorChunk = data.toString();
      scriptError += errorChunk;
      log("error", `\u540E\u7AEF\u9519\u8BEF: ${errorChunk.trim()}`);
    });
    pythonProcess.on("close", (code) => {
      this.currentOperation = null;
      if (code === 0) {
        this.notificationService.completeProgress("\u540E\u7AEF\u7A0B\u5E8F\u6267\u884C\u6210\u529F");
        log("info", "\u540E\u7AEF\u7A0B\u5E8F\u6267\u884C\u6210\u529F", scriptOutput);
        resolve({ success: true, data: true });
      } else {
        const error = createProcessingError(
          "UNKNOWN",
          "\u540E\u7AEF\u7A0B\u5E8F\u6267\u884C\u5931\u8D25",
          `\u9000\u51FA\u7801: ${code}, \u9519\u8BEF\u8F93\u51FA: ${scriptError}`
        );
        this.notificationService.showError(error.message);
        resolve({ success: false, error });
      }
    });
    pythonProcess.on("error", (err) => {
      this.currentOperation = null;
      let error;
      if (err.message.includes("ENOENT")) {
        error = createProcessingError(
          "PYTHON_NOT_FOUND",
          "\u627E\u4E0D\u5230\u540E\u7AEF\u7A0B\u5E8F (jina-linker.exe)",
          err.message
        );
      } else {
        error = createProcessingError(
          "UNKNOWN",
          "\u542F\u52A8\u540E\u7AEF\u7A0B\u5E8F\u5931\u8D25",
          err.message
        );
      }
      this.notificationService.showError(error.message);
      resolve({ success: false, error });
    });
    (_c = this.currentOperation) == null ? void 0 : _c.signal.addEventListener("abort", () => {
      pythonProcess.kill();
      const error = createProcessingError("UNKNOWN", "\u64CD\u4F5C\u5DF2\u88AB\u7528\u6237\u53D6\u6D88");
      this.notificationService.showNotice("\u274C \u64CD\u4F5C\u5DF2\u88AB\u7528\u6237\u53D6\u6D88", 3e3);
      resolve({ success: false, error });
    });
  }
  async runMigration(manifestDir, vaultBasePath) {
    this.notificationService.showNotice("\u5F00\u59CB\u6570\u636E\u8FC1\u79FB\u5230SQLite...", 5e3);
    log("info", "\u5F00\u59CB\u6570\u636E\u8FC1\u79FB\u5230SQLite...");
    if (!manifestDir) {
      const errorMsg = "\u65E0\u6CD5\u786E\u5B9A\u63D2\u4EF6\u76EE\u5F55\u3002\u65E0\u6CD5\u8FD0\u884C\u8FC1\u79FB\u3002";
      log("error", errorMsg);
      this.notificationService.showError(errorMsg);
      return Promise.reject(new Error(errorMsg));
    }
    if (!this.settings.pythonPath) {
      log("warn", "\u7F3A\u5C11 pythonPath\uFF0C\u8DF3\u8FC7\u6570\u636E\u8FC1\u79FB\u3002");
      this.notificationService.showNotice("\u26A0\uFE0F \u672A\u914D\u7F6E Python \u8DEF\u5F84\uFF0C\u5DF2\u8DF3\u8FC7\u65E7\u6570\u636E\u8FC1\u79FB", 4e3);
      return Promise.resolve();
    }
    return new Promise((resolve, reject) => {
      const scriptToExecutePath = path.join(vaultBasePath, manifestDir, "main.py");
      const outputDirInVault = DEFAULT_OUTPUT_DIR_IN_VAULT;
      const args = [
        scriptToExecutePath,
        "--project_root",
        vaultBasePath,
        "--output_dir",
        outputDirInVault,
        "--migrate"
      ];
      const pythonProcess = (0, import_child_process.spawn)(this.settings.pythonPath, args);
      pythonProcess.stdout.on("data", (data) => {
        log("info", `\u8FC1\u79FB\u811A\u672C\u8F93\u51FA: ${data}`);
      });
      pythonProcess.stderr.on("data", (data) => {
        log("error", `\u8FC1\u79FB\u811A\u672C\u9519\u8BEF: ${data}`);
      });
      pythonProcess.on("close", async (code) => {
        if (code === 0) {
          this.notificationService.showNotice("\u2705 \u6570\u636E\u8FC1\u79FB\u5230SQLite\u6210\u529F\u5B8C\u6210\uFF01", 5e3);
          log("info", "\u6570\u636E\u8FC1\u79FB\u5230SQLite\u6210\u529F\u5B8C\u6210\uFF01");
          resolve();
        } else {
          const errorMsg = `\u274C \u6570\u636E\u8FC1\u79FB\u5931\u8D25\uFF0C\u9000\u51FA\u7801: ${code}\u3002\u67E5\u770B\u63A7\u5236\u53F0\u4E86\u89E3\u8BE6\u60C5\u3002`;
          this.notificationService.showError(errorMsg);
          log("error", `\u6570\u636E\u8FC1\u79FB\u5931\u8D25\uFF0C\u9000\u51FA\u7801: ${code}`);
          reject(new Error(`\u8FC1\u79FB\u5931\u8D25\uFF0C\u9000\u51FA\u7801: ${code}`));
        }
      });
      pythonProcess.on("error", (err) => {
        const errorMsg = "\u274C \u542F\u52A8\u8FC1\u79FB\u811A\u672C\u5931\u8D25\u3002\u67E5\u770B\u63A7\u5236\u53F0\u4E86\u89E3\u8BE6\u60C5\u3002";
        this.notificationService.showError(errorMsg);
        log("error", "\u542F\u52A8\u8FC1\u79FB\u811A\u672C\u5931\u8D25:", err);
        reject(err);
      });
    });
  }
  // 脱敏日志中的API密钥
  sanitizeArgsForLog(args) {
    const sanitizedArgs = [];
    for (let i = 0; i < args.length; i++) {
      if ((args[i] === "--jina_api_key" || args[i] === "--ai_api_key") && i + 1 < args.length) {
        sanitizedArgs.push(args[i]);
        sanitizedArgs.push("********");
        i++;
      } else {
        sanitizedArgs.push(args[i]);
      }
    }
    return sanitizedArgs;
  }
};

// services/hash-manager.ts
var import_obsidian3 = require("obsidian");
var crypto = __toESM(require("crypto"));
var HashManager = class {
  constructor(app, cacheManager) {
    this.app = app;
    this.cacheManager = cacheManager;
  }
  // 从完整文本中提取用于哈希的正文部分（在 frontmatter 之后，到哈希边界标记之前）
  extractContentForHashingFromText(fullContent) {
    let body = fullContent;
    const fmRegex = /^---\s*\n([\s\S]*?)\n---\s*\n?/m;
    const fmMatch = fullContent.match(fmRegex);
    if (fmMatch) {
      body = fullContent.slice(fmMatch[0].length);
    }
    const idx = body.indexOf(HASH_BOUNDARY_MARKER);
    if (idx === -1)
      return null;
    let contentToHash = body.slice(0, idx);
    if (!contentToHash.trim()) {
      return "\n";
    }
    contentToHash = contentToHash.replace(/\r\n/g, "\n").replace(/\s+$/, "");
    return contentToHash + "\n";
  }
  // 计算单个文件的内容哈希
  async calculateNoteContentHashForFile(file) {
    try {
      const text = await this.cacheManager.getCachedFileContent(file, this.app.vault);
      const toHash = this.extractContentForHashingFromText(text);
      if (toHash === null) {
        new import_obsidian3.Notice(`\u9519\u8BEF: \u6587\u4EF6 "${file.path}" \u4E2D\u672A\u627E\u5230\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0 "${HASH_BOUNDARY_MARKER}"`);
        return null;
      }
      const hasher = crypto.createHash("sha256");
      hasher.update(toHash, "utf-8");
      return hasher.digest("hex");
    } catch (error) {
      log("error", `\u8BA1\u7B97\u6587\u4EF6 Hash \u5931\u8D25 ${file.path}`, error);
      new import_obsidian3.Notice(`\u8BA1\u7B97\u6587\u4EF6 "${file.path}" \u54C8\u5E0C\u65F6\u51FA\u9519: ${error.message}`);
      return null;
    }
  }
};

// services/link-manager.ts
var import_obsidian4 = require("obsidian");
var LinkManager = class {
  constructor(app, settings, cacheManager) {
    this.app = app;
    this.settings = settings;
    this.cacheManager = cacheManager;
    this.notificationService = NotificationService.getInstance();
  }
  async insertAISuggestedLinksIntoNotes(targetFoldersOption) {
    try {
      log("info", "\u5F00\u59CB\u6267\u884C\uFF1A\u63D2\u5165AI\u5EFA\u8BAE\u94FE\u63A5");
      log("info", `\u76EE\u6807\u6587\u4EF6\u5939: ${targetFoldersOption}`);
      const targetFolders = targetFoldersOption.split(",").map((s) => s.trim()).filter(Boolean);
      const shouldProcessAll = targetFoldersOption.trim() === "/" || targetFolders.length === 0;
      const targetFolderPaths = targetFolders.map((f) => (0, import_obsidian4.normalizePath)(f));
      for (const folderPath of targetFolderPaths) {
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (!folder) {
          return {
            success: false,
            error: createProcessingError("UNKNOWN", `\u6587\u4EF6\u5939\u8DEF\u5F84\u4E0D\u5B58\u5728: ${folderPath}`)
          };
        }
      }
      let allMarkdownFiles = this.app.vault.getMarkdownFiles();
      log("info", "\u5F00\u59CB\u4ECEJSON\u6587\u4EF6\u8BFB\u53D6AI\u8BC4\u5206\u6570\u636E\u5E76\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5");
      const vaultBasePath = this.app.vault.adapter.basePath;
      const aiScoresJsonPath = `${vaultBasePath}/.jina-linker/ai_scores.json`;
      try {
        const aiScoresData = JSON.parse(await window.require("fs").promises.readFile(aiScoresJsonPath, "utf-8"));
        log("info", `\u5C06\u4E3A ${allMarkdownFiles.length} \u4E2A Markdown \u6587\u4EF6\u6267\u884C\u94FE\u63A5\u63D2\u5165`, {
          targetFolders: targetFolderPaths,
          shouldProcessAll,
          aiScoresDataLength: Object.keys((aiScoresData == null ? void 0 : aiScoresData.ai_scores_by_source) || {}).length
        });
        let processedCount = 0;
        let updatedCount = 0;
        for (const file of allMarkdownFiles) {
          const result = await this.processFileForLinkInsertionFromJSON(
            file,
            targetFolderPaths,
            shouldProcessAll,
            aiScoresData
          );
          if (result) {
            if (result.processed)
              processedCount++;
            if (result.updated)
              updatedCount++;
          }
        }
        const summaryMessage = `\u94FE\u63A5\u63D2\u5165\u5B8C\u6210: \u5904\u7406\u4E86 ${processedCount} \u4E2A\u6587\u4EF6\uFF0C\u66F4\u65B0\u4E86 ${updatedCount} \u4E2A\u6587\u4EF6`;
        log("info", summaryMessage);
        this.notificationService.showNotice(`\u2705 ${summaryMessage}`);
        return {
          success: true,
          data: {
            processedFiles: processedCount,
            updatedFiles: updatedCount
          }
        };
      } catch (error) {
        console.error("\u8BFB\u53D6\u6216\u89E3\u6790 AI \u8BC4\u5206 JSON \u6587\u4EF6\u65F6\u51FA\u9519:", error);
        return {
          success: false,
          error: createProcessingError("UNKNOWN", "AI\u8BC4\u5206\u6570\u636E\u8BFB\u53D6\u5931\u8D25", String(error))
        };
      }
    } catch (error) {
      console.error("\u63D2\u5165AI\u94FE\u63A5\u65F6\u51FA\u9519:", error);
      return {
        success: false,
        error: createProcessingError("UNKNOWN", "\u672A\u77E5\u9519\u8BEF", String(error))
      };
    }
  }
  async processFileForLinkInsertionFromJSON(file, targetFolderPaths, shouldProcessAll, aiScoresData) {
    try {
      let inTargetFolder = shouldProcessAll;
      if (!inTargetFolder) {
        for (const folderPath of targetFolderPaths) {
          if (file.path === folderPath || file.path.startsWith(folderPath + "/")) {
            inTargetFolder = true;
            break;
          }
        }
      }
      if (!inTargetFolder) {
        return null;
      }
      const candidates = this.getAICandidatesFromJSON(file.path, aiScoresData);
      if (!candidates || candidates.length === 0) {
        return { processed: true, updated: false };
      }
      let fileContent = await this.cacheManager.getCachedFileContent(file, this.app.vault);
      const originalFileContentForComparison = fileContent;
      const fmRegex = /^---\s*$\n([\s\S]*?)\n^---\s*$\n?/m;
      const fmMatch = fileContent.match(fmRegex);
      let bodyContent = fileContent;
      let frontmatterPart = "";
      if (fmMatch) {
        frontmatterPart = fmMatch[0];
        bodyContent = fileContent.substring(frontmatterPart.length);
      }
      const boundaryMarker = HASH_BOUNDARY_MARKER;
      let boundaryIndexInBody = bodyContent.indexOf(boundaryMarker);
      if (boundaryIndexInBody === -1) {
        const lines = bodyContent.split(/\r?\n/);
        let lastNonEmptyLineIndex = -1;
        for (let i = lines.length - 1; i >= 0; i--) {
          if (lines[i].trim().length > 0) {
            lastNonEmptyLineIndex = i;
            break;
          }
        }
        if (lastNonEmptyLineIndex !== -1) {
          lines.splice(lastNonEmptyLineIndex + 1, 0, boundaryMarker);
          bodyContent = lines.join("\n");
          boundaryIndexInBody = bodyContent.indexOf(boundaryMarker);
        } else {
          log("warn", `${file.path} \u6CA1\u6709\u4EFB\u4F55\u975E\u7A7A\u884C\uFF0C\u8DF3\u8FC7`);
          return { processed: false, updated: false };
        }
      }
      const linksSection = this.generateLinksSection(candidates);
      if (!linksSection) {
        return { processed: true, updated: false };
      }
      const updatedBodyContent = this.insertLinksIntoBody(bodyContent, linksSection, boundaryMarker);
      const finalContent = frontmatterPart + updatedBodyContent;
      if (finalContent !== originalFileContentForComparison) {
        await this.app.vault.modify(file, finalContent);
        return { processed: true, updated: true };
      }
      return { processed: true, updated: false };
    } catch (error) {
      log("error", `\u5904\u7406\u6587\u4EF6 ${file.path} \u65F6\u53D1\u751F\u9519\u8BEF`, error);
      return null;
    }
  }
  // 从JSON数据中获取AI评分候选
  getAICandidatesFromJSON(filePath, aiScoresData) {
    var _a;
    try {
      const bySource = (aiScoresData == null ? void 0 : aiScoresData.ai_scores_by_source) || {};
      const rawList = bySource[filePath] || [];
      const minScore = (_a = this.settings.minAiScoreForLinkInsertion) != null ? _a : 0;
      const candidates = rawList.filter(([_, score]) => (score || 0) >= minScore).slice(0, this.settings.maxLinksToInsertPerNote).map(([targetPath, score]) => ({ targetPath, aiScore: score }));
      return candidates;
    } catch (error) {
      log("error", `\u4ECEJSON\u83B7\u53D6AI\u5019\u9009\u65F6\u53D1\u751F\u9519\u8BEF`, error);
      return [];
    }
  }
  // 生成链接部分的内容
  generateLinksSection(candidates) {
    if (!candidates || candidates.length === 0) {
      return "";
    }
    const linksToInsert = [];
    for (const cand of candidates) {
      if (cand && typeof cand === "object" && cand.targetPath) {
        const targetTFile = this.app.vault.getAbstractFileByPath(cand.targetPath);
        if (targetTFile instanceof import_obsidian4.TFile) {
          const linkText = this.app.metadataCache.fileToLinktext(targetTFile, "", true);
          linksToInsert.push(`- [[${linkText}]]`);
        } else {
          console.warn(`JinaLinker: \u76EE\u6807\u6587\u4EF6 ${cand.targetPath} \u672A\u627E\u5230\u3002\u8DF3\u8FC7\u6B64\u94FE\u63A5\u3002`);
        }
      }
    }
    if (linksToInsert.length === 0) {
      return "";
    }
    const linksMarkdown = linksToInsert.join("\n");
    return `
${SUGGESTED_LINKS_TITLE}
${LINKS_START_MARKER}
${linksMarkdown}
${LINKS_END_MARKER}`;
  }
  // 将链接部分插入到正文中
  insertLinksIntoBody(bodyContent, linksSection, boundaryMarker) {
    const boundaryIndex = bodyContent.indexOf(boundaryMarker);
    if (boundaryIndex === -1) {
      return bodyContent;
    }
    const contentBeforeBoundary = bodyContent.substring(0, boundaryIndex);
    let contentAfterBoundary = bodyContent.substring(boundaryIndex + boundaryMarker.length);
    const linkSectionRegex = new RegExp(`\\s*${this.escapeRegExp(SUGGESTED_LINKS_TITLE)}\\s*${this.escapeRegExp(LINKS_START_MARKER)}[\\s\\S]*?${this.escapeRegExp(LINKS_END_MARKER)}\\s*`, "g");
    let prevContent = "";
    while (prevContent !== contentAfterBoundary) {
      prevContent = contentAfterBoundary;
      contentAfterBoundary = contentAfterBoundary.replace(linkSectionRegex, "");
    }
    contentAfterBoundary = contentAfterBoundary.trim();
    let finalContent = contentBeforeBoundary + boundaryMarker;
    if (linksSection) {
      finalContent += linksSection;
    }
    if (contentAfterBoundary.length > 0) {
      finalContent += `

${contentAfterBoundary}`;
    }
    return finalContent;
  }
  // 用于正则表达式的转义
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "$&");
  }
  // 测试函数，用于验证insertLinksIntoBody函数
  async testInsertLinksIntoBody(testFilePath) {
    const testFile = this.app.vault.getAbstractFileByPath(testFilePath);
    if (!(testFile instanceof import_obsidian4.TFile)) {
      new import_obsidian4.Notice("\u6D4B\u8BD5\u6587\u4EF6\u4E0D\u5B58\u5728");
      return;
    }
    const fileContent = await this.app.vault.read(testFile);
    const newLinksSection = `
## \u5EFA\u8BAE\u94FE\u63A5
<!-- LINKS_START -->
- [[\u68A6\u662F\u773C\u76AE\u91CC\u7684\u58C1\u753B]]
- [[\u65B0\u7684\u6D4B\u8BD5\u94FE\u63A5-${Date.now()}]]
<!-- LINKS_END -->`;
    const boundaryMarker = "<!-- HASH_BOUNDARY -->";
    const processedContent = this.insertLinksIntoBody(fileContent, newLinksSection, boundaryMarker);
    const linkSectionCount = (processedContent.match(/## 建议链接/g) || []).length;
    await this.app.vault.modify(testFile, processedContent);
    new import_obsidian4.Notice(`\u6D4B\u8BD5\u5B8C\u6210\uFF0C\u6587\u4EF6\u4E2D\u5305\u542B ${linkSectionCount} \u4E2A\u94FE\u63A5\u90E8\u5206\uFF0C\u5E94\u8BE5\u4E3A1`);
  }
};

// services/file-processor.ts
var import_obsidian5 = require("obsidian");
var FileProcessor = class {
  constructor(app, cacheManager, settings) {
    this.app = app;
    this.cacheManager = cacheManager;
    this.settings = settings;
  }
  /**
   * Checks if a file should be excluded from processing based on configuration
   * @param filePath The path of the file to check
   * @returns boolean indicating if file should be excluded
   */
  shouldExcludeFile(filePath) {
    if (!this.settings)
      return false;
    const excludedFolders = this.settings.excludedFolders.split(",").map((folder) => folder.trim()).filter((folder) => folder.length > 0);
    for (const folder of excludedFolders) {
      if (filePath.startsWith(folder + "/") || filePath === folder || filePath.includes("/" + folder + "/")) {
        return true;
      }
    }
    const excludedPatterns = this.settings.excludedFilesPatterns.split(",").map((pattern) => pattern.trim()).filter((pattern) => pattern.length > 0);
    const fileName = filePath.split("/").pop() || "";
    const fileNameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
    for (const pattern of excludedPatterns) {
      if (this.matchesPattern(fileName, pattern) || this.matchesPattern(fileNameWithoutExt, pattern)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Pattern matching helper for file exclusion
   * @param text Text to match against
   * @param pattern Pattern to match (supports wildcards)
   * @returns boolean indicating if pattern matches
   */
  matchesPattern(text, pattern) {
    if (pattern === text) {
      return true;
    }
    if (pattern.startsWith("^") && pattern.endsWith("$")) {
      const exactPattern = pattern.slice(1, -1);
      return text === exactPattern;
    }
    if (pattern.includes("*")) {
      const regexPattern = pattern.replace(/[.+?^${}()|[\]\\]/g, "\\$&").replace(/\*/g, ".*");
      const regex = new RegExp(`^${regexPattern}$`, "i");
      return regex.test(text);
    }
    return text.toLowerCase().includes(pattern.toLowerCase());
  }
  // 递归获取文件夹中的所有Markdown文件
  getMarkdownFilesInFolder(folder) {
    const allFiles = this.app.vault.getAllLoadedFiles();
    return allFiles.filter(
      (file) => file instanceof import_obsidian5.TFile && file.extension === "md" && file.path.startsWith(folder.path)
    );
  }
  // 旧版更新哈希功能已废弃，保留占位避免潜在引用错误。
  // 批量添加哈希边界标记
  async addHashBoundaryMarkers(targetRelativePaths) {
    new import_obsidian5.Notice("\u{1F504} \u5F00\u59CB\u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0...");
    let files = [];
    if (!targetRelativePaths.trim()) {
      files = this.app.vault.getMarkdownFiles();
    } else {
      const arr = targetRelativePaths.split(",").map((s) => s.trim()).filter((s) => s);
      for (const rel of arr) {
        const norm = (0, import_obsidian5.normalizePath)(rel);
        const af = this.app.vault.getAbstractFileByPath(norm);
        if (af instanceof import_obsidian5.TFolder) {
          files.push(...this.getMarkdownFilesInFolder(af));
        } else if (af instanceof import_obsidian5.TFile && af.extension === "md") {
          files.push(af);
        }
      }
    }
    files = Array.from(new Set(files));
    let processed = 0, updated = 0, skipped = 0;
    for (const file of files) {
      processed++;
      if (this.shouldExcludeFile(file.path)) {
        skipped++;
        continue;
      }
      try {
        const content = await this.cacheManager.getCachedFileContent(file, this.app.vault);
        if (content.includes(HASH_BOUNDARY_MARKER)) {
          continue;
        }
        const fmRegex = /^---\s*\n([\s\S]*?)\n---\s*\n?/m;
        const match = content.match(fmRegex);
        let frontmatterPart = match ? match[0] : "";
        let body = match ? content.slice(match[0].length) : content;
        const lines = body.split(/\r?\n/);
        let lastIdx = -1;
        for (let i = lines.length - 1; i >= 0; i--) {
          if (lines[i].trim().length > 0) {
            lastIdx = i;
            break;
          }
        }
        if (lastIdx < 0)
          lastIdx = 0;
        lines.splice(lastIdx + 1, 0, "", HASH_BOUNDARY_MARKER);
        const newBody = lines.join("\n");
        const newText = frontmatterPart + newBody;
        await this.app.vault.modify(file, newText);
        updated++;
        this.cacheManager.getCachedFileContent(file, this.app.vault, true);
      } catch (error) {
        log("error", `\u6DFB\u52A0\u8FB9\u754C\u6807\u8BB0\u5931\u8D25 ${file.path}`, error);
      }
    }
    return { success: true, data: { processedFiles: processed, updatedFiles: updated } };
  }
  async addHashBoundaryToFile(file) {
    try {
      const content = await this.app.vault.read(file);
      if (content.includes(HASH_BOUNDARY_MARKER)) {
        return false;
      }
      const fmMatch = content.match(/^---\s*$[\s\S]*?^---\s*$/m);
      let updatedContent;
      if (fmMatch) {
        const fm = fmMatch[0];
        const bodyStart = content.indexOf(fm) + fm.length;
        const body = content.substring(bodyStart).trim();
        updatedContent = `${fm}

${body}

${HASH_BOUNDARY_MARKER}`;
      } else {
        updatedContent = `${content.trim()}

${HASH_BOUNDARY_MARKER}`;
      }
      await this.app.vault.modify(file, updatedContent);
      await this.cacheManager.getCachedFileContent(file, this.app.vault, true);
      return true;
    } catch (error) {
      log("error", `\u5728\u6587\u4EF6 ${file.path} \u4E2D\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0\u65F6\u51FA\u9519`, error);
      return false;
    }
  }
};

// services/tag-manager.ts
var import_obsidian6 = require("obsidian");
var TagManager = class {
  constructor(app, settings, cacheManager) {
    this.app = app;
    this.settings = settings;
    this.cacheManager = cacheManager;
  }
  /**
   * Checks if a file should be excluded from tag processing based on configuration
   * @param filePath The path of the file to check
   * @returns boolean indicating if file should be excluded
   */
  shouldExcludeFile(filePath) {
    const excludedFolders = this.settings.excludedFolders.split(",").map((folder) => folder.trim()).filter((folder) => folder.length > 0);
    for (const folder of excludedFolders) {
      if (filePath.startsWith(folder + "/") || filePath === folder || filePath.includes("/" + folder + "/")) {
        return true;
      }
    }
    const excludedPatterns = this.settings.excludedFilesPatterns.split(",").map((pattern) => pattern.trim()).filter((pattern) => pattern.length > 0);
    const fileName = filePath.split("/").pop() || "";
    const fileNameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
    for (const pattern of excludedPatterns) {
      if (this.matchesPattern(fileName, pattern) || this.matchesPattern(fileNameWithoutExt, pattern)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Pattern matching helper for file exclusion
   */
  matchesPattern(text, pattern) {
    if (pattern === text)
      return true;
    if (pattern.startsWith("^") && pattern.endsWith("$")) {
      const exactPattern = pattern.slice(1, -1);
      return text === exactPattern;
    }
    if (pattern.includes("*")) {
      const regexPattern = pattern.replace(/[.+?^${}()|[\]\\]/g, "\\$&").replace(/\*/g, ".*");
      const regex = new RegExp(`^${regexPattern}$`, "i");
      return regex.test(text);
    }
    return text.toLowerCase().includes(pattern.toLowerCase());
  }
  async insertAIGeneratedTagsIntoNotes(targetFoldersOption) {
    var _a;
    const vaultBase = this.app.vault.adapter.basePath || "";
    const jsonPath = `${vaultBase}/.jina-linker/ai_tags.json`;
    let data = {};
    try {
      data = JSON.parse(await window.require("fs").promises.readFile(jsonPath, "utf-8"));
    } catch (e) {
      log("warn", "\u8BFB\u53D6 ai_tags.json \u5931\u8D25", e);
      return { processed: 0, updated: 0 };
    }
    const tagMap = data.ai_tags_by_note || {};
    const targetFolders = targetFoldersOption.split(",").map((s) => s.trim()).filter(Boolean);
    const shouldProcessAll = targetFoldersOption.trim() === "/" || targetFolders.length === 0;
    let processed = 0, updated = 0, skipped = 0;
    for (const filePath of Object.keys(tagMap)) {
      if (this.shouldExcludeFile(filePath)) {
        skipped++;
        continue;
      }
      if (!shouldProcessAll) {
        const inFolder = targetFolders.some((f) => filePath.startsWith(f.endsWith("/") ? f : f + "/") || filePath === f);
        if (!inFolder)
          continue;
      }
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!(file instanceof import_obsidian6.TFile))
        continue;
      const tagsToInsert = tagMap[filePath].slice(0, this.settings.maxTagsPerNote);
      if (!tagsToInsert.length)
        continue;
      let content = await this.cacheManager.getCachedFileContent(file, this.app.vault);
      const hashBoundaryIndex = content.indexOf(HASH_BOUNDARY_MARKER);
      let contentAfterBoundary = "";
      if (hashBoundaryIndex !== -1) {
        contentAfterBoundary = content.substring(hashBoundaryIndex);
        content = content.substring(0, hashBoundaryIndex);
      }
      const fmRegex = /^---\s*$[\s\S]*?^---\s*$\n?/m;
      let fm = "";
      if (fmRegex.test(content)) {
        fm = content.match(fmRegex)[0];
      } else {
        fm = "---\n---\n";
        content = fm + content;
      }
      const body = content.slice(fm.length);
      const fmObj = fmRegex.test(content) ? (0, import_obsidian6.parseYaml)(fm.replace(/^---\s*|---\s*$/g, "")) || {} : {};
      let tagsArr = Array.isArray(fmObj.tags) ? fmObj.tags : [];
      const beforeLen = tagsArr.length;
      for (const t of tagsToInsert) {
        if (!tagsArr.includes(t))
          tagsArr.push(t);
      }
      if (tagsArr.length === beforeLen) {
        processed++;
        continue;
      }
      fmObj.tags = tagsArr;
      const newFm = `---
${(0, import_obsidian6.stringifyYaml)(fmObj).trim()}
---
`;
      let newContent = newFm + body;
      if (contentAfterBoundary) {
        newContent = newContent.trimEnd() + "\n\n" + contentAfterBoundary;
      }
      await this.app.vault.modify(file, newContent);
      (_a = this.cacheManager.fileContentCache) == null ? void 0 : _a.set(file.path, { content: newContent, mtime: file.stat.mtime });
      processed++;
      updated++;
    }
    new import_obsidian6.Notice(`AI \u6807\u7B7E\u5199\u5165\u5B8C\u6210\uFF1A\u5904\u7406 ${processed} \u6587\u4EF6\uFF0C\u66F4\u65B0 ${updated}`);
    return { processed, updated };
  }
};

// services/uuid-manager.ts
var import_obsidian7 = require("obsidian");
var crypto2 = __toESM(require("crypto"));
var UuidManager = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
    this.notificationService = NotificationService.getInstance();
  }
  /**
   * Ensures a note has a unique UUID, following exclusion rules
   * @param file The TFile to process
   * @returns Promise<void>
   */
  async ensureUniqueNoteId(file) {
    try {
      if (this.shouldExcludeFile(file.path)) {
        log("info", `Skipping UUID processing for excluded file: ${file.path}`);
        return;
      }
      const content = await this.app.vault.read(file);
      const fmRegex = /^---\s*?\n([\s\S]*?)\n---\s*?\n/;
      const fmMatch = content.match(fmRegex);
      if (!fmMatch) {
        const noteId = this.generateUniqueId();
        const newContent = `---
note_id: ${noteId}
---

${content}`;
        await this.app.vault.modify(file, newContent);
        log("info", `Added frontmatter and note_id to new file ${file.path}: ${noteId}`);
        return;
      }
      const fullFmMatch = fmMatch[0];
      const fmContent = fmMatch[1];
      const contentAfterFm = content.slice(fullFmMatch.length);
      try {
        const fmData = (0, import_obsidian7.parseYaml)(fmContent) || {};
        if (!fmData.note_id) {
          fmData.note_id = this.generateUniqueId();
          const newFmContent = (0, import_obsidian7.stringifyYaml)(fmData);
          const newContent = `---
${newFmContent}---
${contentAfterFm}`;
          await this.app.vault.modify(file, newContent);
          log("info", `Added note_id to new file ${file.path}: ${fmData.note_id}`);
        } else if (typeof fmData.note_id === "string" && this.isTemplateId(fmData.note_id)) {
          const oldId = fmData.note_id;
          fmData.note_id = this.generateUniqueId();
          const newFmContent = (0, import_obsidian7.stringifyYaml)(fmData);
          const newContent = `---
${newFmContent}---
${contentAfterFm}`;
          await this.app.vault.modify(file, newContent);
          log("info", `Replaced template ID ${oldId} with new ID for file ${file.path}: ${fmData.note_id}`);
        }
      } catch (yamlError) {
        log("error", `Error parsing frontmatter for file ${file.path}`, yamlError);
        if (!fmContent.includes("note_id:")) {
          const noteId = this.generateUniqueId();
          const newFmContent = fmContent.trim() + `
note_id: ${noteId}`;
          const newContent = content.replace(fmContent, newFmContent);
          await this.app.vault.modify(file, newContent);
          log("info", `Added note_id using simple processing for file ${file.path}: ${noteId}`);
        }
      }
    } catch (error) {
      log("error", `Error processing note_id for file ${file.path}`, error);
      this.notificationService.showError(`Error adding ID to file ${file.path}`);
    }
  }
  /**
   * Checks if a file should be excluded from UUID processing based on configuration
   * @param filePath The path of the file to check
   * @returns boolean indicating if file should be excluded
   */
  shouldExcludeFile(filePath) {
    const excludedFolders = this.settings.excludedFolders.split(",").map((folder) => folder.trim()).filter((folder) => folder.length > 0);
    for (const folder of excludedFolders) {
      if (filePath.startsWith(folder + "/") || filePath === folder || filePath.includes("/" + folder + "/")) {
        return true;
      }
    }
    const excludedPatterns = this.settings.excludedFilesPatterns.split(",").map((pattern) => pattern.trim()).filter((pattern) => pattern.length > 0);
    const fileName = filePath.split("/").pop() || "";
    const fileNameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
    for (const pattern of excludedPatterns) {
      if (this.matchesPattern(fileName, pattern) || this.matchesPattern(fileNameWithoutExt, pattern)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Checks if an ID is a template-generated ID that should be replaced
   * @param id The ID to check
   * @returns boolean indicating if ID is template-generated
   */
  isTemplateId(id) {
    return id.includes("template") || id === "00000000-0000-0000-0000-000000000000" || id.match(/^[a-f0-9]{8}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{12}$/i) === null;
  }
  /**
   * Generates a unique UUID
   * @returns string A new UUID
   */
  generateUniqueId() {
    try {
      return crypto2.randomUUID();
    } catch (e) {
      const random = () => Math.floor(Math.random() * 1e10).toString(16);
      return `${random()}-${random()}-${random()}-${random()}`;
    }
  }
  /**
   * Validates if a string is a properly formatted UUID
   * @param uuid The string to validate
   * @returns boolean indicating if string is valid UUID
   */
  isValidUuid(uuid) {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return uuidRegex.test(uuid);
  }
  /**
   * Processes multiple files to ensure they all have unique UUIDs
   * @param files Array of TFiles to process
   * @returns Promise with processing results
   */
  async ensureUniqueIdsForFiles(files) {
    let processed = 0;
    let updated = 0;
    let skipped = 0;
    for (const file of files) {
      if (file.extension !== "md") {
        continue;
      }
      processed++;
      if (this.shouldExcludeFile(file.path)) {
        skipped++;
        continue;
      }
      const originalContent = await this.app.vault.read(file);
      await this.ensureUniqueNoteId(file);
      const newContent = await this.app.vault.read(file);
      if (originalContent !== newContent) {
        updated++;
      }
    }
    return { processed, updated, skipped };
  }
  /**
   * Pattern matching helper for file exclusion
   * @param text Text to match against
   * @param pattern Pattern to match (supports wildcards)
   * @returns boolean indicating if pattern matches
   */
  matchesPattern(text, pattern) {
    if (pattern === text) {
      return true;
    }
    if (pattern.startsWith("^") && pattern.endsWith("$")) {
      const exactPattern = pattern.slice(1, -1);
      return text === exactPattern;
    }
    if (pattern.includes("*")) {
      const regexPattern = pattern.replace(/[.+?^${}()|[\]\\]/g, "\\$&").replace(/\*/g, ".*");
      const regex = new RegExp(`^${regexPattern}$`, "i");
      return regex.test(text);
    }
    return text.toLowerCase().includes(pattern.toLowerCase());
  }
  /**
   * Gets statistics about UUIDs in the vault
   * @param scanPath Optional path to scan (defaults to entire vault)
   * @returns Promise with UUID statistics
   */
  async getUuidStatistics(scanPath) {
    const allFiles = scanPath ? this.app.vault.getMarkdownFiles().filter((f) => f.path.startsWith(scanPath)) : this.app.vault.getMarkdownFiles();
    let totalFiles = 0;
    let filesWithUuid = 0;
    let filesWithoutUuid = 0;
    let excludedFiles = 0;
    let invalidUuids = 0;
    const uuidMap = /* @__PURE__ */ new Map();
    for (const file of allFiles) {
      totalFiles++;
      if (this.shouldExcludeFile(file.path)) {
        excludedFiles++;
        continue;
      }
      try {
        const content = await this.app.vault.read(file);
        const fmRegex = /^---\s*?\n([\s\S]*?)\n---\s*?\n/;
        const fmMatch = content.match(fmRegex);
        if (fmMatch) {
          const fmData = (0, import_obsidian7.parseYaml)(fmMatch[1]) || {};
          if (fmData.note_id) {
            filesWithUuid++;
            if (!this.isValidUuid(fmData.note_id)) {
              invalidUuids++;
            }
            const count = uuidMap.get(fmData.note_id) || 0;
            uuidMap.set(fmData.note_id, count + 1);
          } else {
            filesWithoutUuid++;
          }
        } else {
          filesWithoutUuid++;
        }
      } catch (error) {
        log("error", `Error reading file ${file.path} for UUID statistics`, error);
      }
    }
    let duplicateUuids = 0;
    for (const [uuid, count] of uuidMap.entries()) {
      if (count > 1) {
        duplicateUuids += count;
      }
    }
    return {
      totalFiles,
      filesWithUuid,
      filesWithoutUuid,
      excludedFiles,
      duplicateUuids,
      invalidUuids
    };
  }
};

// ui/settings-tab.ts
var import_obsidian8 = require("obsidian");
var JinaLinkerSettingTab = class extends import_obsidian8.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Jina AI Linker \u63D2\u4EF6\u8BBE\u7F6E", cls: "jina-settings-header" });
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u57FA\u672C\u8BBE\u7F6E</div>';
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">Jina \u5D4C\u5165\u914D\u7F6E</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("Jina API \u5BC6\u94A5").setDesc("\u60A8\u7684 Jina API \u5BC6\u94A5\uFF0C\u7528\u4E8E\u751F\u6210\u6587\u672C\u5D4C\u5165\u5411\u91CF\u3002").addText((text) => {
      text.inputEl.type = "password";
      text.setPlaceholder("\u8F93\u5165 Jina API \u5BC6\u94A5").setValue(this.plugin.settings.jinaApiKey).onChange(async (value) => {
        this.plugin.settings.jinaApiKey = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("Python \u53EF\u6267\u884C\u8DEF\u5F84").setDesc("\u5982\u7559\u7A7A\u5219\u4F7F\u7528\u7CFB\u7EDF PATH \u4E2D\u7684 python\u3002\u53EF\u4EE5\u586B\u5199\u865A\u62DF\u73AF\u5883\u4E0B\u7684\u5B8C\u6574 python.exe \u8DEF\u5F84\u3002").addText((text) => {
      text.setPlaceholder("\u4F8B\u5982 C:/Python311/python.exe").setValue(this.plugin.settings.pythonPath || "").onChange(async (value) => {
        this.plugin.settings.pythonPath = value.trim();
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("Jina \u6A21\u578B\u540D\u79F0").setDesc("\u7528\u4E8E\u751F\u6210\u5D4C\u5165\u7684 Jina \u6A21\u578B\u540D\u79F0\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.jinaModelName)).setValue(this.plugin.settings.jinaModelName).onChange(async (value) => {
        this.plugin.settings.jinaModelName = value.trim() || DEFAULT_SETTINGS.jinaModelName;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("Jina \u5D4C\u5165\u6700\u5927\u5B57\u7B26\u6570").setDesc("\u4F20\u9012\u7ED9 Jina API \u8FDB\u884C\u5D4C\u5165\u7684\u6587\u672C\u5185\u5BB9\u7684\u6700\u5927\u5B57\u7B26\u6570\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxCharsForJina)).setValue(this.plugin.settings.maxCharsForJina.toString()).onChange(async (value) => {
        this.plugin.settings.maxCharsForJina = parseInt(value) || DEFAULT_SETTINGS.maxCharsForJina;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">AI \u667A\u80FD\u8BC4\u5206\u914D\u7F6E</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("AI \u63D0\u4F9B\u5546").setDesc("\u9009\u62E9\u7528\u4E8E\u667A\u80FD\u8BC4\u5206\u7684 AI \u63D0\u4F9B\u5546\u3002").addDropdown((dropdown) => {
      dropdown.addOption("deepseek", "DeepSeek");
      dropdown.addOption("openai", "OpenAI");
      dropdown.addOption("claude", "Claude (Anthropic)");
      dropdown.addOption("gemini", "Gemini (Google)");
      dropdown.addOption("custom", "\u81EA\u5B9A\u4E49");
      dropdown.setValue(this.plugin.settings.selectedAIProvider);
      dropdown.onChange(async (value) => {
        this.plugin.settings.selectedAIProvider = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    this.displayAIProviderSettings(containerEl);
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u5904\u7406\u53C2\u6570</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u9ED8\u8BA4\u626B\u63CF\u8DEF\u5F84").setDesc('\u8FD0\u884C\u63D2\u4EF6\u65F6\u9ED8\u8BA4\u626B\u63CF\u7684\u6587\u4EF6\u5939\u8DEF\u5F84 (\u534A\u89D2\u9017\u53F7\u5206\u9694)\u3002\u4F7F\u7528 "/" \u8868\u793A\u6574\u4E2A\u4ED3\u5E93\u3002').addText(
      (text) => text.setPlaceholder("\u4F8B\u5982\uFF1A/, \u6587\u4EF6\u59391, \u6587\u4EF6\u59392/\u5B50\u6587\u4EF6\u5939").setValue(this.plugin.settings.defaultScanPath).onChange(async (value) => {
        this.plugin.settings.defaultScanPath = value.trim() || DEFAULT_SETTINGS.defaultScanPath;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6392\u9664\u7684\u6587\u4EF6\u5939").setDesc('Python \u811A\u672C\u5904\u7406\u65F6\u8981\u6392\u9664\u7684\u6587\u4EF6\u5939 (\u534A\u89D2\u9017\u53F7\u5206\u9694)\u3002\u652F\u6301\u4E24\u79CD\u683C\u5F0F\uFF1A\u5355\u4E00\u6587\u4EF6\u5939\u540D(\u5982"Scripts")\u548C\u5B8C\u6574\u8DEF\u5F84(\u5982"20_\u5DF4\u522B\u5854/\u97F3\u4E50")\u3002').addText(
      (text) => text.setPlaceholder("\u4F8B\u5982\uFF1A.obsidian, Scripts, 20_\u5DF4\u522B\u5854/\u97F3\u4E50").setValue(this.plugin.settings.excludedFolders).onChange(async (value) => {
        this.plugin.settings.excludedFolders = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6392\u9664\u7684\u6587\u4EF6\u6A21\u5F0F").setDesc('\u8981\u6392\u9664\u7684\u6587\u4EF6\u6A21\u5F0F (\u534A\u89D2\u9017\u53F7\u5206\u9694)\u3002\u652F\u6301\u4E24\u79CD\u683C\u5F0F\uFF1A\u7EAF\u6587\u4EF6\u540D\u6A21\u5F0F(\u5982"*.excalidraw")\u548C\u8DEF\u5F84\u6A21\u5F0F(\u5982"20_\u5DF4\u522B\u5854/\u97F3\u4E50/*.md")\u3002').addText(
      (text) => text.setPlaceholder("\u4F8B\u5982\uFF1A*.excalidraw, template*.md, 20_\u5DF4\u522B\u5854/\u97F3\u4E50/*.md").setValue(this.plugin.settings.excludedFilesPatterns).onChange(async (value) => {
        this.plugin.settings.excludedFilesPatterns = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("Jina \u76F8\u4F3C\u5EA6\u9608\u503C").setDesc("Jina \u5D4C\u5165\u5411\u91CF\u4E4B\u95F4\u8BA1\u7B97\u4F59\u5F26\u76F8\u4F3C\u5EA6\u7684\u6700\u5C0F\u9608\u503C (0.0 \u5230 1.0)\uFF0C\u4F4E\u4E8E\u6B64\u9608\u503C\u7684\u7B14\u8BB0\u5BF9\u5C06\u4E0D\u88AB\u89C6\u4E3A\u5019\u9009\u94FE\u63A5\u3002").addText(
      (text) => text.setValue(this.plugin.settings.similarityThreshold.toString()).onChange(async (value) => {
        const num = parseFloat(value);
        if (!isNaN(num) && num >= 0 && num <= 1) {
          this.plugin.settings.similarityThreshold = num;
        } else {
          new import_obsidian8.Notice("\u76F8\u4F3C\u5EA6\u9608\u503C\u5FC5\u987B\u662F 0.0 \u5230 1.0 \u4E4B\u95F4\u7684\u6570\u5B57\u3002");
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u9AD8\u7EA7\u6A21\u578B\u4E0E\u5185\u5BB9\u53C2\u6570</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("AI \u8BC4\u5206\u5185\u5BB9\u6700\u5927\u957F\u5EA6").setDesc("\u4F20\u9012\u7ED9 AI API \u8FDB\u884C\u8BC4\u5206\u7684\u6BCF\u6761\u7B14\u8BB0\u5185\u5BB9\u7684\u6700\u5927\u5B57\u7B26\u6570\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxContentLengthForAI)).setValue(this.plugin.settings.maxContentLengthForAI.toString()).onChange(async (value) => {
        this.plugin.settings.maxContentLengthForAI = parseInt(value) || DEFAULT_SETTINGS.maxContentLengthForAI;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u6E90\u7B14\u8BB0\u9001\u4EA4 AI \u8BC4\u5206\u7684\u6700\u5927\u5019\u9009\u94FE\u63A5\u6570").setDesc("\u5BF9\u4E8E\u6BCF\u4E2A\u6E90\u7B14\u8BB0\uFF0C\u6309 Jina \u76F8\u4F3C\u5EA6\u4ECE\u9AD8\u5230\u4F4E\u6392\u5E8F\u540E\uFF0C\u6700\u591A\u9009\u62E9\u591A\u5C11\u4E2A\u5019\u9009\u94FE\u63A5\u53D1\u9001\u7ED9 AI\u8FDB\u884C\u8BC4\u5206\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxCandidatesPerSourceForAIScoring)).setValue(this.plugin.settings.maxCandidatesPerSourceForAIScoring.toString()).onChange(async (value) => {
        this.plugin.settings.maxCandidatesPerSourceForAIScoring = parseInt(value) || DEFAULT_SETTINGS.maxCandidatesPerSourceForAIScoring;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">AI \u6279\u91CF\u5904\u7406\u53C2\u6570</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u6B21 API \u8BF7\u6C42\u7684\u6700\u5927\u7B14\u8BB0\u5BF9\u6570").setDesc("\u6BCF\u6B21\u5411 AI \u670D\u52A1\u53D1\u9001\u8BF7\u6C42\u65F6\uFF0C\u6700\u591A\u5305\u542B\u7684\u7B14\u8BB0\u5BF9\u6570\u91CF\u3002\u589E\u52A0\u53EF\u51CF\u5C11 API \u8C03\u7528\u6B21\u6570\uFF0C\u4F46\u53EF\u80FD\u589E\u52A0\u5904\u7406\u65F6\u95F4\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxPairsPerRequest)).setValue(this.plugin.settings.maxPairsPerRequest.toString()).onChange(async (value) => {
        this.plugin.settings.maxPairsPerRequest = parseInt(value) || DEFAULT_SETTINGS.maxPairsPerRequest;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u4E2A\u7B14\u8BB0\u5728 AI \u8BC4\u5206\u65F6\u7684\u6700\u5927\u5B57\u7B26\u6570").setDesc("\u9650\u5236\u53D1\u9001\u7ED9 AI \u8FDB\u884C\u8BC4\u5206\u7684\u6BCF\u4E2A\u7B14\u8BB0\u7684\u6700\u5927\u5B57\u7B26\u6570\uFF0C\u4EE5\u907F\u514D\u8D85\u51FA API \u9650\u5236\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxCharsPerNote)).setValue(this.plugin.settings.maxCharsPerNote.toString()).onChange(async (value) => {
        this.plugin.settings.maxCharsPerNote = parseInt(value) || DEFAULT_SETTINGS.maxCharsPerNote;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u6B21 API \u8BF7\u6C42\u7684\u6700\u5927\u603B\u5B57\u7B26\u6570").setDesc("\u6BCF\u6B21 API \u6279\u91CF\u8BF7\u6C42\u7684\u6700\u5927\u603B\u5B57\u7B26\u6570\u9650\u5236\uFF0C\u4EE5\u907F\u514D\u8D85\u51FA API \u7684\u8BF7\u6C42\u5927\u5C0F\u9650\u5236\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxTotalCharsPerRequest)).setValue(this.plugin.settings.maxTotalCharsPerRequest.toString()).onChange(async (value) => {
        this.plugin.settings.maxTotalCharsPerRequest = parseInt(value) || DEFAULT_SETTINGS.maxTotalCharsPerRequest;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">AI \u8BC4\u5206\u63D0\u793A\u8BCD\u8BBE\u7F6E</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u4F7F\u7528\u81EA\u5B9A\u4E49\u8BC4\u5206\u63D0\u793A\u8BCD").setDesc("\u542F\u7528\u540E\u5C06\u4F7F\u7528\u4E0B\u65B9\u81EA\u5B9A\u4E49\u7684\u8BC4\u5206\u63D0\u793A\u8BCD\uFF0C\u800C\u975E\u9ED8\u8BA4\u63D0\u793A\u8BCD\u3002").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useCustomScoringPrompt).onChange(async (value) => {
        this.plugin.settings.useCustomScoringPrompt = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    const promptContainer = containerEl.createEl("div", { cls: "jina-settings-block" });
    promptContainer.createEl("div", {
      text: "\u81EA\u5B9A\u4E49\u8BC4\u5206\u63D0\u793A\u8BCD",
      cls: "setting-item-name"
    });
    promptContainer.createEl("div", {
      text: "\u81EA\u5B9A\u4E49AI\u8BC4\u5206\u7684\u63D0\u793A\u8BCD\u548C\u8BC4\u5206\u6807\u51C6\u3002\u5C06\u4F5C\u4E3A\u6307\u4EE4\u53D1\u9001\u7ED9AI\u6A21\u578B\u4EE5\u6307\u5BFC\u8BC4\u5206\u8FC7\u7A0B\u3002",
      cls: "setting-item-description"
    });
    const textareaContainer = promptContainer.createEl("div", { cls: "jina-textarea-container" });
    const textarea = textareaContainer.createEl("textarea", {
      cls: "jina-textarea",
      attr: {
        rows: "10",
        placeholder: "\u5728\u6B64\u8F93\u5165\u81EA\u5B9A\u4E49\u8BC4\u5206\u63D0\u793A\u8BCD..."
      }
    });
    textarea.value = this.plugin.settings.customScoringPrompt || DEFAULT_SCORING_PROMPT;
    textarea.addEventListener("change", async () => {
      this.plugin.settings.customScoringPrompt = textarea.value;
      await this.plugin.saveSettings();
    });
    const buttonContainer = promptContainer.createEl("div", { cls: "jina-button-container" });
    const resetButton = buttonContainer.createEl("button", {
      text: "\u6062\u590D\u9ED8\u8BA4\u63D0\u793A\u8BCD",
      cls: "mod-warning"
    });
    resetButton.addEventListener("click", async () => {
      textarea.value = DEFAULT_SCORING_PROMPT;
      this.plugin.settings.customScoringPrompt = DEFAULT_SCORING_PROMPT;
      await this.plugin.saveSettings();
      new import_obsidian8.Notice("\u5DF2\u6062\u590D\u9ED8\u8BA4\u8BC4\u5206\u63D0\u793A\u8BCD");
    });
    if (!this.plugin.settings.useCustomScoringPrompt) {
      textarea.disabled = true;
      resetButton.disabled = true;
      textarea.classList.add("jina-disabled");
      resetButton.classList.add("jina-disabled");
    }
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u94FE\u63A5\u63D2\u5165\u8BBE\u7F6E</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u94FE\u63A5\u63D2\u5165\u7684\u6700\u5C0F AI \u5206\u6570").setDesc("\u53EA\u6709 AI \u8BC4\u5206\u5927\u4E8E\u6216\u7B49\u4E8E\u6B64\u503C\u7684\u5019\u9009\u94FE\u63A5\u624D\u4F1A\u88AB\u63D2\u5165\u5230\u7B14\u8BB0\u4E2D\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.minAiScoreForLinkInsertion)).setValue(this.plugin.settings.minAiScoreForLinkInsertion.toString()).onChange(async (value) => {
        this.plugin.settings.minAiScoreForLinkInsertion = parseInt(value) || DEFAULT_SETTINGS.minAiScoreForLinkInsertion;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6BCF\u4E2A\u7B14\u8BB0\u6700\u591A\u63D2\u5165\u7684\u94FE\u63A5\u6570").setDesc("\u5BF9\u4E8E\u6BCF\u4E2A\u7B14\u8BB0\uFF0C\u6700\u591A\u63D2\u5165\u591A\u5C11\u6761\u7B26\u5408\u6761\u4EF6\u7684\u5EFA\u8BAE\u94FE\u63A5\u3002").addText(
      (text) => text.setPlaceholder(String(DEFAULT_SETTINGS.maxLinksToInsertPerNote)).setValue(this.plugin.settings.maxLinksToInsertPerNote.toString()).onChange(async (value) => {
        this.plugin.settings.maxLinksToInsertPerNote = parseInt(value) || DEFAULT_SETTINGS.maxLinksToInsertPerNote;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">\u6027\u80FD\u548C\u8C03\u8BD5</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6E05\u7406\u6587\u4EF6\u7F13\u5B58").setDesc("\u6E05\u7406\u63D2\u4EF6\u7684\u6587\u4EF6\u5185\u5BB9\u7F13\u5B58\u4EE5\u91CA\u653E\u5185\u5B58\u3002").addButton((button) => button.setButtonText("\u6E05\u7406\u7F13\u5B58").onClick(() => {
      this.plugin.clearCache();
    }));
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u663E\u793A\u6027\u80FD\u7EDF\u8BA1").setDesc("\u5728\u63A7\u5236\u53F0\u663E\u793A\u63D2\u4EF6\u7684\u6027\u80FD\u7EDF\u8BA1\u4FE1\u606F\u3002").addButton((button) => button.setButtonText("\u663E\u793A\u7EDF\u8BA1").onClick(() => {
      const metrics = this.plugin.performanceMonitor.getMetricsSummary();
      console.log("Jina AI Linker \u6027\u80FD\u7EDF\u8BA1:", metrics);
      new import_obsidian8.Notice("\u6027\u80FD\u7EDF\u8BA1\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0", 3e3);
    }));
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u53D6\u6D88\u5F53\u524D\u64CD\u4F5C").setDesc("\u53D6\u6D88\u6B63\u5728\u8FDB\u884C\u7684Python\u811A\u672C\u6216\u94FE\u63A5\u63D2\u5165\u64CD\u4F5C\u3002").addButton((button) => button.setButtonText("\u53D6\u6D88\u64CD\u4F5C").setClass("mod-warning").onClick(() => {
      this.plugin.cancelCurrentOperation();
    }));
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div class="jina-settings-section-title">AI \u6807\u7B7E\u751F\u6210\u8BBE\u7F6E</div>';
    new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u4F7F\u7528\u81EA\u5B9A\u4E49\u6807\u7B7E\u63D0\u793A\u8BCD").setDesc("\u542F\u7528\u540E\u5C06\u4F7F\u7528\u4E0B\u65B9\u81EA\u5B9A\u4E49\u7684\u6807\u7B7E\u63D0\u793A\u8BCD\uFF0C\u800C\u975E\u9ED8\u8BA4\u63D0\u793A\u8BCD\u3002\u6CE8\u610F\uFF1A\u7CFB\u7EDF\u5C06\u81EA\u52A8\u6DFB\u52A0\u683C\u5F0F\u8981\u6C42\u548C\u7ED3\u5C3E\u63D0\u793A\uFF0C\u4EE5\u786E\u4FDD\u8F93\u51FA\u7B26\u5408\u9884\u671F\u683C\u5F0F\u3002").addToggle((toggle) => toggle.setValue(this.plugin.settings.useCustomTagPrompt).onChange(async (value) => {
      this.plugin.settings.useCustomTagPrompt = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    const tagPromptContainer = containerEl.createEl("div", { cls: "jina-settings-block" });
    tagPromptContainer.createEl("div", {
      text: "\u81EA\u5B9A\u4E49\u6807\u7B7E\u63D0\u793A\u8BCD",
      cls: "setting-item-name"
    });
    tagPromptContainer.createEl("div", {
      text: "\u81EA\u5B9A\u4E49 AI \u751F\u6210\u6807\u7B7E\u7684\u63D0\u793A\u8BCD\uFF0C\u5C06\u4F5C\u4E3A\u6307\u4EE4\u53D1\u9001\u7ED9 AI \u6A21\u578B\u4EE5\u6307\u5BFC\u6807\u7B7E\u751F\u6210\u3002",
      cls: "setting-item-description"
    });
    const tagTextareaContainer = tagPromptContainer.createEl("div", { cls: "jina-textarea-container" });
    const tagTextarea = tagTextareaContainer.createEl("textarea", {
      cls: "jina-textarea",
      attr: {
        rows: "10",
        placeholder: "\u5728\u6B64\u8F93\u5165\u81EA\u5B9A\u4E49\u6807\u7B7E\u63D0\u793A\u8BCD..."
      }
    });
    tagTextarea.value = this.plugin.settings.customTagPrompt || DEFAULT_TAG_PROMPT;
    tagTextarea.addEventListener("change", async () => {
      this.plugin.settings.customTagPrompt = tagTextarea.value;
      await this.plugin.saveSettings();
    });
    const tagBtnContainer = tagPromptContainer.createEl("div", { cls: "jina-button-container" });
    const tagResetBtn = tagBtnContainer.createEl("button", {
      text: "\u6062\u590D\u9ED8\u8BA4\u63D0\u793A\u8BCD",
      cls: "mod-warning"
    });
    tagResetBtn.addEventListener("click", async () => {
      tagTextarea.value = DEFAULT_TAG_PROMPT;
      this.plugin.settings.customTagPrompt = DEFAULT_TAG_PROMPT;
      await this.plugin.saveSettings();
      new import_obsidian8.Notice("\u5DF2\u6062\u590D\u9ED8\u8BA4\u6807\u7B7E\u63D0\u793A\u8BCD");
    });
    if (!this.plugin.settings.useCustomTagPrompt) {
      tagTextarea.disabled = true;
      tagResetBtn.disabled = true;
      tagTextarea.classList.add("jina-disabled");
      tagResetBtn.classList.add("jina-disabled");
    }
    containerEl.createEl("div", { cls: "jina-settings-section", text: "" }).innerHTML = '<div style="margin-top: 2em; color: var(--text-muted); font-size: 0.9em;">Jina AI Linker v' + this.plugin.manifest.version + "</div>";
    this.addCustomStyles();
  }
  displayAIProviderSettings(containerEl) {
    const selectedProvider = this.plugin.settings.selectedAIProvider;
    const aiConfig = this.plugin.settings.aiModels[selectedProvider];
    aiConfig.enabled = true;
    {
      new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("API URL").setDesc(`${this.getProviderDisplayName(selectedProvider)} \u7684 API \u7AEF\u70B9\u5730\u5740\u3002`).addText((text) => text.setPlaceholder(this.getDefaultApiUrl(selectedProvider)).setValue(aiConfig.apiUrl).onChange(async (value) => {
        this.plugin.settings.aiModels[selectedProvider].apiUrl = value.trim() || this.getDefaultApiUrl(selectedProvider);
        await this.plugin.saveSettings();
      }));
      new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("API \u5BC6\u94A5").setDesc(`\u60A8\u7684 ${this.getProviderDisplayName(selectedProvider)} API \u5BC6\u94A5\u3002`).addText((text) => {
        text.inputEl.type = "password";
        text.setPlaceholder(`\u8F93\u5165 ${this.getProviderDisplayName(selectedProvider)} API \u5BC6\u94A5`).setValue(aiConfig.apiKey).onChange(async (value) => {
          this.plugin.settings.aiModels[selectedProvider].apiKey = value;
          await this.plugin.saveSettings();
        });
      });
      new import_obsidian8.Setting(containerEl).setClass("jina-settings-block").setName("\u6A21\u578B\u540D\u79F0").setDesc(`${this.getProviderDisplayName(selectedProvider)} \u7684\u6A21\u578B\u540D\u79F0\u3002`).addText((text) => text.setPlaceholder(this.getDefaultModelName(selectedProvider)).setValue(aiConfig.modelName).onChange(async (value) => {
        this.plugin.settings.aiModels[selectedProvider].modelName = value.trim() || this.getDefaultModelName(selectedProvider);
        await this.plugin.saveSettings();
      }));
      this.displayModelSuggestions(containerEl, selectedProvider);
    }
  }
  getProviderDisplayName(provider) {
    const names = {
      "deepseek": "DeepSeek",
      "openai": "OpenAI",
      "claude": "Claude",
      "gemini": "Gemini",
      "custom": "\u81EA\u5B9A\u4E49"
    };
    return names[provider] || provider;
  }
  getDefaultApiUrl(provider) {
    return DEFAULT_AI_MODELS[provider].apiUrl;
  }
  getDefaultModelName(provider) {
    return DEFAULT_AI_MODELS[provider].modelName;
  }
  displayModelSuggestions(containerEl, provider) {
    const suggestions = this.getModelSuggestions(provider);
    if (suggestions.length === 0)
      return;
    const suggestionContainer = containerEl.createEl("div", { cls: "jina-model-suggestions" });
    suggestionContainer.createEl("span", { text: "\u5E38\u7528\u6A21\u578B: ", cls: "jina-suggestion-label" });
    for (const suggestion of suggestions) {
      const suggestionEl = suggestionContainer.createEl("span", {
        text: suggestion,
        cls: "jina-model-suggestion"
      });
      suggestionEl.addEventListener("click", async () => {
        this.plugin.settings.aiModels[provider].modelName = suggestion;
        await this.plugin.saveSettings();
        this.display();
      });
    }
  }
  getModelSuggestions(provider) {
    switch (provider) {
      case "deepseek":
        return ["deepseek-chat", "deepseek-reasoner"];
      case "openai":
        return ["gpt-o3-mini", "gpt-4o"];
      case "claude":
        return ["claude-4-opus", "claude-3.7-sonnet"];
      case "gemini":
        return ["gemini-2.5 flash", "gemini-2.5-pro"];
      default:
        return [];
    }
  }
  addCustomStyles() {
    const styleEl = document.createElement("style");
    styleEl.id = "jina-settings-custom-styles";
    const existingStyle = document.getElementById("jina-settings-custom-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    styleEl.textContent = `
            .jina-textarea-container {
                width: 100%;
                margin-bottom: 10px;
            }
            
            .jina-textarea {
                width: 100%;
                min-height: 200px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                padding: 8px;
                font-family: var(--font-monospace);
                background-color: var(--background-primary);
                color: var(--text-normal);
                resize: vertical;
            }
            
            .jina-button-container {
                display: flex;
                justify-content: flex-end;
                margin-top: 8px;
            }
            
            .jina-disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .jina-model-suggestions {
                margin-top: 6px;
                margin-bottom: 16px;
                margin-left: 24px;
            }
            
            .jina-suggestion-label {
                color: var(--text-muted);
                margin-right: 8px;
                font-size: 13px;
            }
            
            .jina-model-suggestion {
                display: inline-block;
                background-color: var(--interactive-accent);
                color: var(--text-on-accent);
                padding: 2px 8px;
                border-radius: 4px;
                margin-right: 8px;
                margin-bottom: 8px;
                font-size: 12px;
                cursor: pointer;
            }
            
            .jina-model-suggestion:hover {
                opacity: 0.85;
            }
        `;
    document.head.appendChild(styleEl);
  }
};

// ui/modals/run-plugin-modal.ts
var import_obsidian9 = require("obsidian");
var RunPluginModal = class extends import_obsidian9.Modal {
  constructor(app, plugin, callbackFn) {
    var _a;
    super(app);
    this.scanPath = "/";
    this.scoringMode = "smart";
    this.notificationService = NotificationService.getInstance();
    this.plugin = plugin;
    this.callbackFn = callbackFn;
    if ((_a = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _a.defaultScanPath) {
      this.scanPath = plugin.settings.defaultScanPath;
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Jina AI Linker \u8FD0\u884C\u9009\u9879" });
    new import_obsidian9.Setting(contentEl).setName("\u626B\u63CF\u76EE\u6807\u6587\u4EF6\u5939").setDesc('\u8F93\u5165\u8981\u5904\u7406\u7684\u6587\u4EF6\u5939\u8DEF\u5F84\uFF0C\u591A\u4E2A\u6587\u4EF6\u5939\u7528\u9017\u53F7\u5206\u9694\u3002\u4F7F\u7528 "/" \u8868\u793A\u6574\u4E2A\u4ED3\u5E93\u3002').addText(
      (text) => text.setPlaceholder("\u4F8B\u5982\uFF1A/, \u6587\u4EF6\u59391, \u6587\u4EF6\u59392/\u5B50\u6587\u4EF6\u5939").setValue(this.scanPath).onChange(async (value) => {
        this.scanPath = value.trim();
      })
    );
    new import_obsidian9.Setting(contentEl).setName("AI \u8BC4\u5206\u6A21\u5F0F").setDesc("\u63A7\u5236\u5982\u4F55\u5904\u7406\u5DF2\u6709\u8BC4\u5206\u7684\u6587\u6863\u5BF9\u3002").addDropdown(
      (dropdown) => dropdown.addOption("smart", "\u667A\u80FD\u6A21\u5F0F\uFF08\u4EC5\u8BC4\u5206\u65B0\u589E\u548C\u53D8\u66F4\uFF09").addOption("force", "\u5F3A\u5236\u6A21\u5F0F\uFF08\u91CD\u65B0\u8BC4\u5206\u6240\u6709\uFF09").addOption("skip", "\u8DF3\u8FC7\u6A21\u5F0F\uFF08\u4E0D\u8FDB\u884C\u8BC4\u5206\uFF09").setValue(this.scoringMode).onChange((value) => {
        this.scoringMode = value;
      })
    );
    new import_obsidian9.Setting(contentEl).addButton((btn) => btn.setButtonText("\u53D6\u6D88").onClick(() => {
      this.close();
    })).addButton((btn) => btn.setButtonText("\u8FD0\u884C").setCta().onClick(() => {
      if (!this.scanPath) {
        this.notificationService.showError("\u8BF7\u8F93\u5165\u6709\u6548\u7684\u626B\u63CF\u8DEF\u5F84");
        return;
      }
      if (this.callbackFn) {
        this.callbackFn({
          scanPath: this.scanPath,
          scoringMode: this.scoringMode
        });
      }
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// ui/modals/progress-modal.ts
var import_obsidian10 = require("obsidian");
var ProgressModal = class extends import_obsidian10.Modal {
  constructor(app, title, onCancel) {
    super(app);
    this.onCancel = onCancel;
    this.modalEl.addClass("jina-progress-modal");
    this.titleEl.setText(title);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.statusText = contentEl.createEl("div", {
      cls: "jina-progress-status",
      text: "\u51C6\u5907\u4E2D..."
    });
    const progressContainer = contentEl.createDiv("jina-progress-container");
    const progressTrack = progressContainer.createDiv("jina-progress-track");
    this.progressBar = progressTrack.createDiv("jina-progress-bar");
    this.detailsText = contentEl.createEl("div", {
      cls: "jina-progress-details",
      text: ""
    });
    if (this.onCancel) {
      const buttonContainer = contentEl.createDiv("jina-progress-buttons");
      this.cancelButton = buttonContainer.createEl("button", {
        text: "\u53D6\u6D88\u64CD\u4F5C",
        cls: "mod-warning"
      });
      this.cancelButton.addEventListener("click", () => {
        var _a;
        (_a = this.onCancel) == null ? void 0 : _a.call(this);
        this.close();
      });
    }
    this.addStyles();
  }
  updateProgress(current, total, status, details) {
    const percentage = total > 0 ? current / total * 100 : 0;
    this.progressBar.style.width = `${percentage}%`;
    this.statusText.textContent = `${status} (${current}/${total})`;
    if (details) {
      this.detailsText.textContent = details;
    }
  }
  setCompleted(message) {
    this.progressBar.style.width = "100%";
    this.statusText.textContent = message;
    this.detailsText.textContent = "";
    if (this.cancelButton) {
      this.cancelButton.textContent = "\u5173\u95ED";
      this.cancelButton.removeClass("mod-warning");
      this.cancelButton.addClass("mod-cta");
    }
  }
  setError(message) {
    this.statusText.textContent = `\u274C ${message}`;
    this.progressBar.style.backgroundColor = "var(--color-red)";
    if (this.cancelButton) {
      this.cancelButton.textContent = "\u5173\u95ED";
      this.cancelButton.removeClass("mod-warning");
    }
  }
  addStyles() {
    const styleEl = this.contentEl.createEl("style");
    styleEl.textContent = `
            .jina-progress-modal .modal-content {
                padding: 20px;
                min-width: 400px;
            }
            .jina-progress-status {
                font-size: 16px;
                font-weight: 500;
                margin-bottom: 15px;
                color: var(--text-normal);
            }
            .jina-progress-container {
                margin-bottom: 15px;
            }
            .jina-progress-track {
                width: 100%;
                height: 8px;
                background-color: var(--background-secondary);
                border-radius: 4px;
                overflow: hidden;
            }
            .jina-progress-bar {
                height: 100%;
                background-color: var(--interactive-accent);
                transition: width 0.3s ease;
                width: 0%;
            }
            .jina-progress-details {
                font-size: 14px;
                color: var(--text-muted);
                margin-bottom: 15px;
                min-height: 20px;
            }
            .jina-progress-buttons {
                display: flex;
                justify-content: flex-end;
            }
        `;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// ui/modals/add-hash-boundary-modal.ts
var import_obsidian12 = require("obsidian");

// ui/modals/path-suggest-modal.ts
var import_obsidian11 = require("obsidian");
var PathSuggestModal = class extends import_obsidian11.FuzzySuggestModal {
  constructor(app, paths, inputText, callback) {
    super(app);
    this.paths = paths;
    this.inputText = inputText || "";
    this.callback = callback;
    this.setPlaceholder("\u9009\u62E9\u6587\u4EF6\u6216\u6587\u4EF6\u5939\u8DEF\u5F84");
    if (this.inputText) {
      this.inputEl.value = this.inputText;
      this.inputEl.dispatchEvent(new Event("input"));
    }
  }
  getItems() {
    return this.paths;
  }
  getItemText(path2) {
    return path2;
  }
  onChooseItem(path2, evt) {
    this.callback(path2);
  }
  renderSuggestion(item, el) {
    const match = item.item;
    el.setText(match);
    if (match.endsWith("/")) {
      el.addClass("jina-folder-path");
      const iconEl = el.createSpan({ cls: "jina-folder-icon" });
      iconEl.setText("\u{1F4C1} ");
      el.prepend(iconEl);
    } else {
      el.addClass("jina-file-path");
      const iconEl = el.createSpan({ cls: "jina-file-icon" });
      iconEl.setText("\u{1F4C4} ");
      el.prepend(iconEl);
    }
  }
};

// ui/modals/add-hash-boundary-modal.ts
var AddHashBoundaryModal = class extends import_obsidian12.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.filePaths = "";
    // 用于存储自动完成的文件和文件夹路径
    this.allPaths = [];
    this.plugin = plugin;
    this.onSubmit = onSubmit;
    this.loadAllPaths();
  }
  // 加载所有文件和文件夹路径
  loadAllPaths() {
    this.allPaths = [];
    const allFiles = this.app.vault.getAllLoadedFiles();
    for (const file of allFiles) {
      if (file instanceof import_obsidian12.TFile && file.extension === "md") {
        this.allPaths.push(file.path);
      } else if (file instanceof import_obsidian12.TFolder) {
        this.allPaths.push(file.path + "/");
      }
    }
    this.allPaths.sort();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0" });
    const settingDiv = contentEl.createDiv();
    settingDiv.addClass("jina-setting");
    const descEl = settingDiv.createDiv();
    descEl.addClass("setting-item-description");
    descEl.setText('\u4E3A\u6307\u5B9A\u7684\u7B14\u8BB0\u6587\u4EF6\u6DFB\u52A0 <!-- HASH_BOUNDARY --> \u6807\u8BB0\u3002\u8BF7\u8F93\u5165\u4E00\u4E2A\u6216\u591A\u4E2A\u4ED3\u5E93\u76F8\u5BF9\u8DEF\u5F84 (\u7528\u82F1\u6587\u9017\u53F7 "," \u5206\u9694)\u3002\u8BF7\u4F7F\u7528\u6B63\u659C\u6760 "/" \u4F5C\u4E3A\u8DEF\u5F84\u5206\u9694\u7B26\u3002(\u4F8B\u5982\uFF1A\u6587\u4EF6\u59391/\u7B14\u8BB0.md, \u6587\u4EF6\u59392/)\u3002');
    const inputContainer = settingDiv.createDiv();
    inputContainer.addClass("jina-path-input-container");
    this.inputEl = document.createElement("textarea");
    this.inputEl.addClass("jina-path-textarea");
    this.inputEl.setAttr("rows", "3");
    this.inputEl.setAttr("placeholder", "Notes/Note1.md, \u7559\u7A7A\u5904\u7406\u6240\u6709\u6587\u4EF6");
    this.inputEl.value = this.filePaths;
    inputContainer.appendChild(this.inputEl);
    const browseButton = document.createElement("button");
    browseButton.setText("\u6D4F\u89C8...");
    browseButton.addClass("jina-browse-button");
    inputContainer.appendChild(browseButton);
    this.inputEl.addEventListener("input", () => {
      this.filePaths = this.inputEl.value;
    });
    browseButton.addEventListener("click", () => {
      const cursorPos = this.inputEl.selectionStart;
      const text = this.inputEl.value;
      let startPos = text.lastIndexOf(",", cursorPos - 1);
      if (startPos === -1)
        startPos = 0;
      else
        startPos += 1;
      const currentPath = text.substring(startPos, cursorPos).trim();
      this.openPathSuggestModal(currentPath, (selectedPath) => {
        if (selectedPath) {
          const newValue = text.substring(0, startPos) + (startPos > 0 ? " " : "") + selectedPath + text.substring(cursorPos);
          this.inputEl.value = newValue;
          this.filePaths = newValue;
          const newCursorPos = startPos + selectedPath.length + (startPos > 0 ? 1 : 0);
          this.inputEl.setSelectionRange(newCursorPos, newCursorPos);
          this.inputEl.focus();
        }
      });
    });
    const buttonContainer = contentEl.createDiv();
    buttonContainer.addClass("jina-button-container");
    const submitButton = buttonContainer.createEl("button");
    submitButton.setText("\u6DFB\u52A0\u6807\u8BB0");
    submitButton.addClass("mod-cta");
    submitButton.addEventListener("click", () => {
      this.close();
      this.onSubmit(this.filePaths);
    });
    this.addStyles(contentEl);
  }
  // 打开路径建议弹窗
  openPathSuggestModal(currentPath, callback) {
    const modal = new PathSuggestModal(this.app, this.allPaths, currentPath, callback);
    modal.open();
  }
  // 添加样式
  addStyles(contentEl) {
    const styleEl = contentEl.createEl("style");
    styleEl.textContent = `
            .jina-setting {
                padding: 12px 0;
            }
            .jina-path-input-container {
                display: flex;
                margin-top: 8px;
                gap: 8px;
                align-items: flex-start;
            }
            .jina-path-textarea {
                flex-grow: 1;
                min-height: 60px;
                padding: 8px;
                border-radius: 4px;
                font-size: 14px;
                background-color: var(--background-modifier-form-field);
                border: 1px solid var(--background-modifier-border);
            }
            .jina-browse-button {
                padding: 6px 12px;
                background-color: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
            .jina-button-container {
                display: flex;
                justify-content: flex-end;
                margin-top: 12px;
            }
        `;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// ui/modals/add-ai-tags-modal.ts
var import_obsidian13 = require("obsidian");
var AddAiTagsModal = class extends import_obsidian13.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.filePaths = "";
    this.selectedMode = "smart";
    // 用于存储自动完成的文件和文件夹路径
    this.allPaths = [];
    this.plugin = plugin;
    this.onSubmit = onSubmit;
    this.loadAllPaths();
  }
  // 加载所有文件和文件夹路径
  loadAllPaths() {
    this.allPaths = [];
    const allFiles = this.app.vault.getAllLoadedFiles();
    for (const file of allFiles) {
      if (file instanceof import_obsidian13.TFile && file.extension === "md") {
        this.allPaths.push(file.path);
      } else if (file instanceof import_obsidian13.TFolder) {
        this.allPaths.push(file.path + "/");
      }
    }
    this.allPaths.sort();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u6279\u91CF\u63D2\u5165 AI \u6807\u7B7E" });
    new import_obsidian13.Setting(contentEl).setName("\u751F\u6210\u6A21\u5F0F").setDesc("\u667A\u80FD = \u4EC5\u4E3A\u65E0\u6807\u7B7E\u65B0\u7B14\u8BB0\u751F\u6210\uFF1B\u5F3A\u5236 = \u603B\u662F\u91CD\u65B0\u751F\u6210").addDropdown((dd) => {
      dd.addOption("smart", "\u667A\u80FD (\u4EC5\u65B0\u7B14\u8BB0)");
      dd.addOption("force", "\u5F3A\u5236 (\u5168\u90E8\u91CD\u751F\u6210)");
      dd.setValue(this.selectedMode);
      dd.onChange((v) => this.selectedMode = v);
    });
    const pathSetting = new import_obsidian13.Setting(contentEl).setName("\u76EE\u6807\u6587\u4EF6/\u6587\u4EF6\u5939").setDesc('\u591A\u4E2A\u8DEF\u5F84\u7528\u9017\u53F7\u5206\u9694\uFF0C"/" \u8868\u793A\u6574\u4E2A\u4ED3\u5E93');
    pathSetting.addTextArea((ta) => {
      ta.inputEl.rows = 3;
      ta.setPlaceholder("Notes/Note1.md, \u7559\u7A7A\u5904\u7406\u6240\u6709\u6587\u4EF6");
      ta.setValue(this.filePaths);
      ta.onChange((v) => {
        this.filePaths = v;
      });
      this.inputEl = ta.inputEl;
    });
    pathSetting.addButton((btn) => {
      btn.setButtonText("\u6D4F\u89C8...");
      btn.onClick(() => {
        this.openPathSuggestModal("", (selectedPath) => {
          if (selectedPath) {
            if (this.filePaths && this.filePaths.trim() !== "" && !this.filePaths.trim().endsWith(",")) {
              this.filePaths += ", ";
            }
            this.filePaths += selectedPath;
            this.inputEl.value = this.filePaths;
          }
        });
      });
    });
    new import_obsidian13.Setting(contentEl).addButton((btn) => btn.setButtonText("\u53D6\u6D88").onClick(() => this.close())).addButton((btn) => btn.setButtonText("\u63D2\u5165\u6807\u7B7E").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.filePaths, this.selectedMode);
    }));
  }
  // 打开路径建议弹窗
  openPathSuggestModal(currentPath, callback) {
    const modal = new PathSuggestModal(this.app, this.allPaths, currentPath, callback);
    modal.open();
  }
  // 旧版 addStyles 样式已移除，改用 Setting 默认样式
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var JinaLinkerPlugin = class extends import_obsidian14.Plugin {
  async onload() {
    console.log("\u{1F680} Jina AI Linker \u63D2\u4EF6\u5F00\u59CB\u52A0\u8F7D...");
    await this.loadSettings();
    console.log("\u2705 \u63D2\u4EF6\u8BBE\u7F6E\u52A0\u8F7D\u5B8C\u6210");
    this.performanceMonitor = new PerformanceMonitor();
    this.cacheManager = new CacheManager();
    this.pythonBridge = new PythonBridge(this.settings);
    this.hashManager = new HashManager(this.app, this.cacheManager);
    this.linkManager = new LinkManager(this.app, this.settings, this.cacheManager);
    this.tagManager = new TagManager(this.app, this.settings, this.cacheManager);
    this.fileProcessor = new FileProcessor(this.app, this.cacheManager, this.settings);
    this.uuidManager = new UuidManager(this.app, this.settings);
    this.notificationService = NotificationService.getInstance();
    console.log("\u2705 \u6027\u80FD\u76D1\u63A7\u5668\u548C\u670D\u52A1\u521D\u59CB\u5316\u5B8C\u6210");
    this.registerEvent(
      this.app.vault.on("create", async (file) => {
        if (file instanceof import_obsidian14.TFile && file.extension === "md") {
          setTimeout(async () => {
            await this.uuidManager.ensureUniqueNoteId(file);
          }, 500);
        }
      })
    );
    console.log("\u{1F389} Jina AI Linker \u63D2\u4EF6\u52A0\u8F7D\u5B8C\u6210\uFF01");
    this.addCommands();
    this.addRibbonMenu();
    this.addSettingTab(new JinaLinkerSettingTab(this.app, this));
    this.notificationService.showNotice("Jina AI Linker \u63D2\u4EF6\u5DF2\u52A0\u8F7D");
  }
  onunload() {
    this.pythonBridge.cancelOperation();
    this.cacheManager.clearCache();
    this.notificationService.showNotice("Jina AI Linker \u63D2\u4EF6\u5DF2\u5378\u8F7D", 2e3);
  }
  // 添加各种命令
  addCommands() {
    this.addCommand({
      id: "run-jina-linker-processing-and-insert-links",
      name: "\u5904\u7406\u7B14\u8BB0\u5E76\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5",
      callback: () => {
        console.log("\u{1F4DD} \u7528\u6237\u542F\u52A8\uFF1A\u5904\u7406\u7B14\u8BB0\u5E76\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5\u529F\u80FD");
        this.runPluginWithUI();
      }
    });
    this.addCommand({
      id: "add-hash-boundary-markers",
      name: "\u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0",
      callback: () => {
        console.log("\u{1F3F7}\uFE0F \u7528\u6237\u542F\u52A8\uFF1A\u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0\u529F\u80FD");
        new AddHashBoundaryModal(this.app, this, async (targetPaths) => {
          const result = await this.fileProcessor.addHashBoundaryMarkers(targetPaths);
          if (result.success) {
            const { processedFiles, updatedFiles } = result.data;
            new import_obsidian14.Notice(`\u2705 \u5904\u7406\u5B8C\u6210\uFF01\u68C0\u67E5\u4E86 ${processedFiles} \u4E2A\u6587\u4EF6\uFF0C\u6DFB\u52A0\u6807\u8BB0\u5230 ${updatedFiles} \u4E2A\u6587\u4EF6`);
          } else {
            new import_obsidian14.Notice("\u274C \u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0\u5931\u8D25");
          }
        }).open();
      }
    });
    this.addCommand({
      id: "insert-ai-tags-into-notes",
      name: "\u6279\u91CF\u63D2\u5165 AI \u6807\u7B7E\u5230\u7B14\u8BB0",
      callback: () => {
        console.log("\u{1F3F7}\uFE0F \u7528\u6237\u542F\u52A8\uFF1A\u6279\u91CF\u63D2\u5165 AI \u6807\u7B7E\u529F\u80FD");
        new AddAiTagsModal(this.app, this, (paths, mode) => {
          this.runTagOnlyFlow(paths, mode);
        }).open();
      }
    });
    this.addCommand({
      id: "ensure-unique-note-id",
      name: "\u4E3A\u5F53\u524D\u7B14\u8BB0\u751F\u6210\u552F\u4E00ID",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension === "md") {
          if (!checking) {
            this.uuidManager.ensureUniqueNoteId(activeFile).then(() => {
              this.notificationService.showNotice("\u2705 \u5DF2\u4E3A\u5F53\u524D\u7B14\u8BB0\u6DFB\u52A0/\u66F4\u65B0\u552F\u4E00ID");
            }).catch((err) => {
              this.notificationService.showError("\u274C \u6DFB\u52A0/\u66F4\u65B0ID\u5931\u8D25");
              log("error", "\u624B\u52A8\u6DFB\u52A0note_id\u5931\u8D25", err);
            });
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "test-insert-links-into-body",
      name: "\u6D4B\u8BD5\uFF1A\u5904\u7406\u91CD\u590D\u94FE\u63A5\u90E8\u5206",
      callback: () => {
        console.log("\u{1F9EA} \u7528\u6237\u542F\u52A8\uFF1A\u6D4B\u8BD5\u5904\u7406\u91CD\u590D\u94FE\u63A5\u90E8\u5206");
        this.linkManager.testInsertLinksIntoBody("\u68A6\u4E2D\u753B\u5883.md");
      }
    });
  }
  // 添加功能菜单到工具栏
  addRibbonMenu() {
    this.addRibbonIcon("link", "Jina Linker \u5DE5\u5177", (evt) => {
      const menu = new import_obsidian14.Menu();
      menu.addItem((item) => {
        item.setTitle("\u5904\u7406\u7B14\u8BB0\u5E76\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5").setIcon("link").onClick(() => {
          this.runPluginWithUI();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0").setIcon("hash").onClick(() => {
          new AddHashBoundaryModal(this.app, this, async (targetPaths) => {
            const result = await this.fileProcessor.addHashBoundaryMarkers(targetPaths);
            if (result.success) {
              const { processedFiles, updatedFiles } = result.data;
              new import_obsidian14.Notice(`\u2705 \u5904\u7406\u5B8C\u6210\uFF01\u68C0\u67E5\u4E86 ${processedFiles} \u4E2A\u6587\u4EF6\uFF0C\u6DFB\u52A0\u6807\u8BB0\u5230 ${updatedFiles} \u4E2A\u6587\u4EF6`);
            } else {
              new import_obsidian14.Notice("\u274C \u6279\u91CF\u6DFB\u52A0\u54C8\u5E0C\u8FB9\u754C\u6807\u8BB0\u5931\u8D25");
            }
          }).open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u6279\u91CF\u63D2\u5165 AI \u6807\u7B7E").setIcon("tag").onClick(() => {
          new AddAiTagsModal(this.app, this, (paths, mode) => {
            this.runTagOnlyFlow(paths, mode);
          }).open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u4E3A\u5F53\u524D\u7B14\u8BB0\u751F\u6210\u552F\u4E00ID").setIcon("hash").onClick(() => {
          const activeFile = this.app.workspace.getActiveFile();
          if (activeFile && activeFile.extension === "md") {
            this.uuidManager.ensureUniqueNoteId(activeFile).then(() => {
              this.notificationService.showNotice("\u2705 \u5DF2\u4E3A\u5F53\u524D\u7B14\u8BB0\u6DFB\u52A0/\u66F4\u65B0\u552F\u4E00ID");
            }).catch((err) => {
              this.notificationService.showError("\u274C \u6DFB\u52A0/\u66F4\u65B0ID\u5931\u8D25");
              log("error", "\u624B\u52A8\u6DFB\u52A0note_id\u5931\u8D25", err);
            });
          } else {
            this.notificationService.showError("\u8BF7\u9009\u62E9\u4E00\u4E2A Markdown \u6587\u4EF6");
          }
        });
      });
      menu.showAtMouseEvent(evt);
    });
  }
  // 主要的插件功能执行流程
  async runPluginWithUI() {
    new RunPluginModal(this.app, this, async (options) => {
      const progressModal = new ProgressModal(this.app, "Jina AI Linker \u5904\u7406\u8FDB\u5EA6", () => {
        this.pythonBridge.cancelOperation();
      });
      progressModal.open();
      try {
        const originalTagsMode = this.settings.tagsMode;
        this.settings.tagsMode = "skip";
        progressModal.updateProgress(0, 2, "\u6B63\u5728\u8FD0\u884CPython\u811A\u672C", "\u751F\u6210\u5D4C\u5165\u6570\u636E\u548CAI\u8BC4\u5206...");
        const result = await this.pythonBridge.runPythonScript(
          options.scanPath,
          options.scoringMode,
          this.manifest.dir || "",
          this.app.vault.adapter.getBasePath()
        );
        this.settings.tagsMode = originalTagsMode;
        if (result.success) {
          progressModal.updateProgress(1, 2, "\u6B63\u5728\u63D2\u5165\u5EFA\u8BAE\u94FE\u63A5", "\u5904\u7406\u7B14\u8BB0\u6587\u4EF6...");
          const insertResult = await this.linkManager.insertAISuggestedLinksIntoNotes(options.scanPath);
          if (insertResult.success) {
            const { processedFiles, updatedFiles } = insertResult.data;
            progressModal.setCompleted(`\u2705 \u94FE\u63A5\u63D2\u5165\u5B8C\u6210\uFF01\u68C0\u67E5\u4E86 ${processedFiles} \u4E2A\u6587\u4EF6\uFF0C\u63D2\u5165\u94FE\u63A5\u5230 ${updatedFiles} \u4E2A\u6587\u4EF6`);
            const metrics = this.performanceMonitor.getMetricsSummary();
            log("info", "\u6027\u80FD\u7EDF\u8BA1", metrics);
            setTimeout(() => progressModal.close(), 3e3);
          } else {
            progressModal.setError("\u94FE\u63A5\u63D2\u5165\u5931\u8D25");
          }
        } else {
          progressModal.setError("Python\u811A\u672C\u6267\u884C\u5931\u8D25");
        }
      } catch (error) {
        progressModal.setError("\u5904\u7406\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF");
        log("error", "\u5904\u7406\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF", error);
      }
    }).open();
  }
  // 仅生成并插入 AI 标签的快捷流程
  async runTagOnlyFlow(targetPaths, mode) {
    const originalMode = this.settings.tagsMode;
    this.settings.tagsMode = mode;
    const progress = new ProgressModal(this.app, "\u751F\u6210\u5E76\u63D2\u5165 AI \u6807\u7B7E", () => this.pythonBridge.cancelOperation());
    progress.open();
    try {
      progress.updateProgress(0, 2, "\u8FD0\u884C\u540E\u7AEF", "\u751F\u6210 AI \u6807\u7B7E\u2026");
      const pyRes = await this.pythonBridge.runPythonScript(
        targetPaths || "/",
        "skip",
        // 评分跳过 - 确保运行标签功能时不执行AI评分，虽然依然会进行嵌入处理（必要的前置步骤）
        this.manifest.dir || "",
        this.app.vault.adapter.getBasePath()
      );
      if (!pyRes.success)
        throw new Error("Python \u6267\u884C\u5931\u8D25");
      progress.updateProgress(1, 2, "\u5199\u5165\u6807\u7B7E", "\u63D2\u5165 front-matter\u2026");
      const { processed, updated } = await this.tagManager.insertAIGeneratedTagsIntoNotes(targetPaths);
      progress.setCompleted(`\u2705 \u5904\u7406 ${processed} \u6587\u4EF6\uFF0C\u66F4\u65B0 ${updated}`);
      setTimeout(() => progress.close(), 2500);
    } catch (err) {
      progress.setError("\u751F\u6210/\u63D2\u5165\u6807\u7B7E\u5931\u8D25");
      log("error", "runTagOnlyFlow error", err);
    } finally {
      this.settings.tagsMode = originalMode;
    }
  }
  // 计算单个文件的哈希值
  async calculateHashForFile(filePath) {
    const normalizedFilePath = (0, import_obsidian14.normalizePath)(filePath);
    const tFile = this.app.vault.getAbstractFileByPath(normalizedFilePath);
    if (!(tFile instanceof import_obsidian14.TFile)) {
      new import_obsidian14.Notice(`\u9519\u8BEF\uFF1A\u6587\u4EF6 "${normalizedFilePath}" \u672A\u627E\u5230\u6216\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u6587\u4EF6\u3002`);
      return;
    }
    const hash = await this.hashManager.calculateNoteContentHashForFile(tFile);
    if (hash) {
      new import_obsidian14.Notice(`\u6587\u4EF6 "${filePath}" \u7684\u5185\u5BB9\u54C8\u5E0C\u503C: ${hash}`);
    }
  }
  // 迁移逻辑已废弃，保留空实现避免旧代码引用
  async runMigration() {
    return Promise.resolve();
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    if (loadedData) {
      delete loadedData.outputDirInVault;
      delete loadedData.aiJudgedCandidatesFmKey;
    }
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    if (!this.settings.aiModels) {
      this.settings.aiModels = { ...DEFAULT_AI_MODELS };
    } else {
      for (const provider of Object.keys(DEFAULT_AI_MODELS)) {
        if (!this.settings.aiModels[provider]) {
          this.settings.aiModels[provider] = { ...DEFAULT_AI_MODELS[provider] };
        } else {
          this.settings.aiModels[provider] = Object.assign(
            {},
            DEFAULT_AI_MODELS[provider],
            this.settings.aiModels[provider]
          );
        }
      }
    }
    if (loadedData && loadedData.deepseekApiKey && !this.settings.aiModels.deepseek.apiKey) {
      this.settings.aiModels.deepseek.apiKey = loadedData.deepseekApiKey;
      this.settings.aiModels.deepseek.enabled = true;
    }
    if (!this.settings.selectedAIProvider || !this.settings.aiModels[this.settings.selectedAIProvider]) {
      this.settings.selectedAIProvider = "deepseek";
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  cancelCurrentOperation() {
    this.pythonBridge.cancelOperation();
  }
  clearCache() {
    this.cacheManager.clearCache();
    this.notificationService.showNotice("\u{1F9F9} \u7F13\u5B58\u5DF2\u6E05\u7406", 2e3);
  }
};
